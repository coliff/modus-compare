'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c9ded160.js');

// eslint-disable-next-line
const IconChevronLeftThick = (props) => {
  var _a, _b, _c;
  return (index.h("svg", { height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    index.h("mask", { id: "mask0_434_74", maskUnits: "userSpaceOnUse", x: "6", y: "5", width: "8", height: "10" },
      index.h("path", { d: "M13.0875 6.175L11.9125 5L6.91248 10L11.9125 15L13.0875 13.825L9.27081 10L13.0875 6.175Z", fill: "white" })),
    index.h("g", { mask: "url(#mask0_434_74)" },
      index.h("path", { d: "M13.0875 6.175L11.9125 5L6.91248 10L11.9125 15L13.0875 13.825L9.27081 10L13.0875 6.175Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976' }))));
};

// eslint-disable-next-line
const IconChevronRightThick = (props) => {
  var _a, _b, _c;
  return (index.h("svg", { height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    index.h("mask", { id: "mask0_434_80", maskUnits: "userSpaceOnUse", x: "6", y: "5", width: "8", height: "10" },
      index.h("path", { d: "M8.08748 5L6.91248 6.175L10.7291 10L6.91248 13.825L8.08748 15L13.0875 10L8.08748 5Z", fill: "white" })),
    index.h("g", { mask: "url(#mask0_434_80)" },
      index.h("path", { d: "M8.08748 5L6.91248 6.175L10.7291 10L6.91248 13.825L8.08748 15L13.0875 10L8.08748 5Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976' }))));
};

const modusPaginationCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");nav{align-items:center;background-color:#fff;border-radius:0.125rem;display:inline-flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";justify-content:center;user-select:none;width:100%}nav ol{align-items:center;display:flex;flex-direction:row;justify-content:center;padding:0}nav ol li{align-items:center;display:flex;flex-direction:row;justify-content:center;list-style-type:none;min-width:min-content}nav ol li.active{background-color:#dcedf9;color:#0063a3}nav ol li.disabled{opacity:0.3}nav ol li.hoverable{cursor:pointer}nav ol li.hoverable:not(.active):hover{background-color:#cbcdd6}nav.small{height:1.5rem}nav.small ol li{font-size:0.75rem;height:1.5rem;width:1.5rem}nav.medium{height:2rem}nav.medium ol li{font-size:0.875rem;height:2rem;width:2rem}nav.large{height:3rem}nav.large ol li{font-size:1.25rem;height:3rem;width:3rem}";

let ModusPagination = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.pageChange = index.createEvent(this, "pageChange", 7);
    /* The pagination's size. */
    this.size = 'medium';
    this.chevronSizeBySize = new Map([
      ['small', '16'],
      ['medium', '20'],
      ['large', '24'],
    ]);
    this.classBySize = new Map([
      ['small', 'small'],
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
  }
  setPages() {
    const pages = [];
    const ellipsis = '...';
    // Always show the first page.
    pages.push(this.minPage);
    if (this.maxPage - this.minPage < 7) {
      // No need for ellipsis for 7 pages - push all of them.
      for (let i = this.minPage + 1; i < this.maxPage; i++) {
        pages.push(i);
      }
    }
    else {
      if (this.activePage - this.minPage < 4) {
        // One of the first 4 pages is active.
        [1, 2, 3, 4].map(val => pages.push(this.minPage + val));
        pages.push(ellipsis);
      }
      else if (this.maxPage - this.activePage < 4) {
        // One of the last 4 pages is active.
        pages.push(ellipsis);
        [4, 3, 2, 1].map(val => pages.push(this.maxPage - val));
      }
      else {
        // The active page is somewhere in the middle.
        pages.push(ellipsis);
        [-1, 0, 1].map(val => pages.push(this.activePage + val));
        pages.push(ellipsis);
      }
    }
    // Always show the last page.
    pages.push(this.maxPage);
    this.pages = pages;
  }
  handleChevronClick(way) {
    if (way === 'back' && this.activePage != this.minPage) {
      this.activePage--;
    }
    else if (way === 'forward' && this.activePage != this.maxPage) {
      this.activePage++;
    }
  }
  handleKeydownBack(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleChevronClick('back');
  }
  handleKeydownForward(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleChevronClick('forward');
  }
  handlePageClick(page) {
    if (!isNaN(page)) {
      this.activePage = page;
      this.pageChange.emit(page);
    }
  }
  render() {
    this.setPages();
    return (index.h("nav", { "aria-label": this.ariaLabel, class: `${this.classBySize.get(this.size)}` }, index.h("ol", null, this.maxPage - this.minPage >= 7 &&
      index.h("li", { class: `${this.activePage != this.minPage ? 'hoverable' : 'disabled'}`, onClick: () => this.handleChevronClick('back'), onKeyDown: (event) => this.handleKeydownBack(event), tabIndex: 0 }, index.h(IconChevronLeftThick, { size: this.chevronSizeBySize.get(this.size) })), this.pages.map(page => {
      return (index.h("li", { class: `${page === this.activePage ? 'active' : ''} ${!isNaN(+page) ? 'hoverable' : ''}`, onClick: () => this.handlePageClick(+page) }, page));
    }), this.maxPage - this.minPage >= 7 &&
      index.h("li", { class: `${this.activePage != this.maxPage ? 'hoverable' : 'disabled'}`, onClick: () => this.handleChevronClick('forward'), onKeyDown: (event) => this.handleKeydownForward(event), tabIndex: 0 }, index.h(IconChevronRightThick, { size: this.chevronSizeBySize.get(this.size) })))));
  }
};
ModusPagination.style = modusPaginationCss;

exports.modus_pagination = ModusPagination;

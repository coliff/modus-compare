'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c9ded160.js');

// eslint-disable-next-line
const IconChevronUpThick = (props) => {
  var _a, _b, _c;
  return (index.h("svg", { class: "icon-chevron-up-thick", height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? () => props.onClick() : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    index.h("path", { d: "M12.5292 8.21649C12.2405 7.92783 11.7595 7.92783 11.4708 8.21649L5.21649 14.4387C4.92783 14.7594 4.92783 15.1014 5.21649 15.39L6 16C6.28866 16.2887 6.67927 16.2887 7 16L12 11L17 16C17.3207 16.2887 17.7572 16.5556 18.0458 16.2669L18.7835 15.5292C19.0722 15.2405 19.0722 14.7594 18.7835 14.4387L12.5292 8.21649Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976' })));
};

// eslint-disable-next-line
const IconChevronDownThick = (props) => {
  var _a, _b, _c;
  return (index.h("svg", { class: "icon-chevron-down-thick", height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? () => props.onClick() : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    index.h("path", { d: "M11.4708 15.7835C11.7595 16.0722 12.2405 16.0722 12.5292 15.7835L18.7835 9.56128C19.0722 9.24055 19.0722 8.89864 18.7835 8.60998L18 8C17.7113 7.71134 17.3207 7.71134 17 8L12 13L7 8C6.67927 7.71134 6.24284 7.44444 5.95418 7.7331L5.21649 8.47079C4.92783 8.75945 4.92783 9.24055 5.21649 9.56128L11.4708 15.7835Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976' })));
};

const modusAccordionItemCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.accordion-item{border-bottom:0.125rem solid #cbcdd6;display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}.accordion-item .header{align-items:center;display:inline-flex;font-size:1.125rem;font-weight:600;height:48px}.accordion-item .header.disabled{opacity:0.3}.accordion-item .header.small{height:32px;font-size:0.875rem}.accordion-item .header .title{padding-left:0.25rem}.accordion-item .header .icon-chevron-up-thick,.accordion-item .header .icon-chevron-down-thick{margin-left:auto}.accordion-item .body{display:none;padding:1rem 0.5rem}.accordion-item .body.expanded{display:block}";

let ModusAccordionItem = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.closed = index.createEvent(this, "closed", 7);
    this.opened = index.createEvent(this, "opened", 7);
    /** (optional) The size of accordion item. */
    this.size = 'standard';
    this.classBySize = new Map([
      ['condensed', 'small'],
      ['standard', 'standard'],
    ]);
  }
  handleHeaderClick() {
    if (this.disabled) {
      return;
    }
    this.expanded = !this.expanded;
    if (this.expanded) {
      this.opened.emit();
    }
    else {
      this.closed.emit();
    }
  }
  handleKeydown(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleHeaderClick();
  }
  render() {
    const sizeClass = `${this.classBySize.get(this.size)}`;
    const disabledClass = `${this.disabled ? 'disabled' : ''}`;
    const iconSize = this.size === 'standard' ? '24' : '20';
    const bodyClass = `body ${sizeClass} ${this.expanded ? 'expanded' : ''}`;
    return (index.h("div", { "aria-disabled": this.disabled, "aria-expanded": this.expanded, class: "accordion-item", role: "region" }, index.h("div", { class: `header ${sizeClass} ${disabledClass}`, onClick: () => this.handleHeaderClick(), onKeyDown: (event) => this.handleKeydown(event), tabIndex: 0 }, index.h("span", { class: "title" }, this.headerText), this.expanded ? index.h(IconChevronUpThick, { size: iconSize }) : index.h(IconChevronDownThick, { size: iconSize })), index.h("div", { class: bodyClass }, index.h("slot", null))));
  }
};
ModusAccordionItem.style = modusAccordionItemCss;

exports.modus_accordion_item = ModusAccordionItem;

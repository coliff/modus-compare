'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c9ded160.js');

const modusSwitchCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-switch{align-items:center;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem}.modus-switch .switch{background-color:#6a6e79;border:0.125rem #6a6e79 solid;border-radius:1rem;height:0.875rem;position:relative;width:1.875rem}.modus-switch .switch .slider{background-color:#6a6e79;border-radius:1rem;bottom:0;cursor:pointer;height:0.875rem;left:0;position:absolute;right:0;top:0;transition:0.2s;width:1.875rem}.modus-switch .switch .slider::before{background-color:#fff;border-radius:50%;content:\"\";height:0.875rem;position:absolute;transition:0.2s;width:0.875rem}.modus-switch .switch.checked{background-color:#217cbb;border-color:#217cbb}.modus-switch .switch.checked .slider{background-color:#217cbb}.modus-switch .switch.checked .slider::before{transform:translateX(1rem)}.modus-switch .switch:active .slider{background-color:#217cbb}.modus-switch:hover .switch{border-color:#217cbb}.modus-switch input{display:none}.modus-switch label{margin-left:0.5rem}.modus-switch.disabled{opacity:0.3;pointer-events:none}";

let ModusSwitch = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.switchClick = index.createEvent(this, "switchClick", 7);
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.handleSwitchClick();
        break;
    }
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Space':
        this.handleSwitchClick();
        break;
    }
  }
  handleSwitchClick() {
    if (this.disabled) {
      return;
    }
    this.updateChecked();
    this.switchClick.emit(this.checked);
  }
  updateChecked() {
    this.checked = !this.checked;
    this.checkboxInput.checked = this.checked;
  }
  render() {
    const containerClassName = `modus-switch ${this.disabled ? 'disabled' : ''}`;
    const switchClassName = `switch ${this.checked ? 'checked' : ''}`;
    return (index.h("div", { class: containerClassName, onClick: () => this.handleSwitchClick(), tabIndex: 0 }, index.h("div", { class: switchClassName }, index.h("span", { class: "slider" })), index.h("input", { "aria-checked": this.checked, "aria-disabled": this.disabled, "aria-label": this.ariaLabel, checked: this.checked, disabled: this.disabled, ref: (el) => this.checkboxInput = el, role: "switch", type: "checkbox" }), this.label ? index.h("label", null, this.label) : null));
  }
};
ModusSwitch.style = modusSwitchCss;

exports.modus_switch = ModusSwitch;

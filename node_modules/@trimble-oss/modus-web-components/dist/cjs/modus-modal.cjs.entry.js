'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c9ded160.js');
const iconClose = require('./icon-close-6498e676.js');

const modusModalCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-modal{background-color:rgba(0, 0, 0, 0.4);color:#000;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:100%;left:0;overflow:auto;position:fixed;top:0;width:100%;z-index:1}.modus-modal.visible{display:block}.modus-modal.hidden{display:none}.modus-modal .content{background-color:#fff;border:0.0625rem solid #888;display:flex;flex-direction:column;justify-content:center;margin:15% auto;max-width:650px;min-width:375px;padding:0 1rem;width:max-content}.modus-modal .content .header{align-items:center;display:flex;font-size:1.125rem;font-weight:600;height:64px;justify-content:space-between}.modus-modal .content .header .icon-close{cursor:pointer}.modus-modal .content .header .icon-close:hover svg path{fill:#6a6e79}.modus-modal .content .header .icon-close:active svg path{fill:#252a2e}.modus-modal .content .body{height:auto;padding:1rem 0}.modus-modal .content .footer{align-items:center;display:flex;height:64px;justify-content:flex-end}.modus-modal .content .footer modus-button:first-of-type{margin:0 0.5rem}";

let ModusModal = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.closed = index.createEvent(this, "closed", 7);
    this.opened = index.createEvent(this, "opened", 7);
    this.primaryButtonClick = index.createEvent(this, "primaryButtonClick", 7);
    this.secondaryButtonClick = index.createEvent(this, "secondaryButtonClick", 7);
  }
  async close() {
    this.visible = false;
    this.closed.emit();
    return Promise.resolve();
  }
  async open() {
    this.visible = true;
    this.opened.emit();
    return Promise.resolve();
  }
  handleOverlayClick(event) {
    if (event.target.classList.contains('overlay')) {
      this.close();
    }
  }
  handlePrimaryKeydown(event) {
    switch (event.code) {
      case 'Enter':
        this.primaryButtonClick.emit();
        break;
    }
  }
  handleSecondaryKeydown(event) {
    switch (event.code) {
      case 'Enter':
        this.secondaryButtonClick.emit();
        break;
    }
  }
  render() {
    return (index.h("div", { "aria-hidden": this.closed, "aria-label": this.ariaLabel, class: `modus-modal overlay ${this.visible ? 'visible' : 'hidden'}`, onClick: (event) => this.handleOverlayClick(event), role: "dialog" }, index.h("div", { class: "content" }, index.h("div", { class: "header" }, this.headerText, index.h("div", { class: "icon-close", onClick: () => this.close() }, index.h(iconClose.IconClose, { size: "20" }))), index.h("div", { class: "body" }, index.h("slot", null)), index.h("div", { class: "footer" }, this.secondaryButtonText &&
      index.h("modus-button", { "button-style": "outline", color: "secondary", onClick: () => this.secondaryButtonClick.emit(), onKeyDown: (event) => this.handlePrimaryKeydown(event) }, this.secondaryButtonText), this.primaryButtonText &&
      index.h("modus-button", { color: "primary", onClick: () => this.primaryButtonClick.emit(), onKeyDown: (event) => this.handleSecondaryKeydown(event) }, this.primaryButtonText)))));
  }
};
ModusModal.style = modusModalCss;

exports.modus_modal = ModusModal;

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c9ded160.js');
const iconInfo = require('./icon-info-5b4cf623.js');
const iconCheckCircle = require('./icon-check-circle-526cb31a.js');
const iconHelp = require('./icon-help-6e586614.js');
const iconClose = require('./icon-close-6498e676.js');

const modusToastCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-toast{align-items:center;background-color:#fff;border:0.0625rem solid #6a6e79;border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:#252a2e;display:flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;height:2.6875rem;padding:0 1rem}.modus-toast .text{margin:0 0.5rem}.modus-toast .close{margin-left:auto}.modus-toast .close:hover svg path{fill:#6a6e79}.modus-toast .close:active svg path{fill:#252a2e}.modus-toast.danger{background-color:#fbd4d7;border-color:#da212c}.modus-toast.dark{background-color:#252a2e;color:#fff}.modus-toast.dark .close svg path{fill:#fff}.modus-toast.dark .close:hover svg path{fill:#b7b9c3}.modus-toast.dark .close:active svg path{fill:#6a6e79}.modus-toast.primary{background-color:#dcedf9;border-color:#0e416c;color:#0063a3}.modus-toast.secondary{background-color:#b7b9c3;border-color:#000}.modus-toast.success{background-color:#e0eccf;border-color:#1e8a44}.modus-toast.tertiary{background-color:#f1f1f6;border-color:#b7b9c3}.modus-toast.warning{background-color:#fff5e4;border-color:#fbad26}";

let ModusToast = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.dismissClick = index.createEvent(this, "dismissClick", 7);
    /** (optional) Whether to show the toasts' icon. */
    this.showIcon = true;
    /** (optional) The toasts' type. */
    this.type = 'default';
    this.iconByType = new Map([
      ['danger', index.h(iconCheckCircle.IconWarning, { color: '#C81922', size: '18' })],
      ['dark', index.h(iconInfo.IconInfo, { color: 'white', size: '18' })],
      ['default', index.h(iconInfo.IconInfo, { size: '18' })],
      ['primary', index.h(iconInfo.IconInfo, { color: '#0D6AA8', size: '18' })],
      ['secondary', index.h(iconHelp.IconHelp, { size: '18' })],
      ['success', index.h(iconCheckCircle.IconCheckCircle, { color: '#5E9331', size: '18' })],
      ['tertiary', index.h(iconInfo.IconInfo, { size: '18' })],
      ['warning', index.h(iconCheckCircle.IconError, { color: '#FFBE00', size: '18' })],
    ]);
    this.classByType = new Map([
      ['danger', 'danger'],
      ['dark', 'dark'],
      ['default', 'default'],
      ['primary', 'primary'],
      ['secondary', 'secondary'],
      ['success', 'success'],
      ['tertiary', 'tertiary'],
      ['warning', 'warning'],
    ]);
  }
  render() {
    const icon = this.iconByType.get(this.type);
    const className = `modus-toast ${this.classByType.get(this.type)}`;
    return (index.h("div", { "aria-label": this.ariaLabel, class: className, role: "status" }, this.showIcon && icon, index.h("span", { class: 'text' }, index.h("slot", null)), index.h("span", { class: 'close' }, this.dismissible && index.h(iconClose.IconClose, { size: '18', onClick: () => this.dismissClick.emit() }))));
  }
};
ModusToast.style = modusToastCss;

exports.modus_toast = ModusToast;

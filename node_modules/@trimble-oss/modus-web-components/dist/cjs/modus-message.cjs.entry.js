'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c9ded160.js');
const iconInfo = require('./icon-info-5b4cf623.js');
const iconHelp = require('./icon-help-6e586614.js');

const modusMessageCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-message{align-items:center;border-radius:0.125rem;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;padding:0.5rem}.modus-message .icon{align-items:center;display:flex;margin-right:0.5rem}.modus-message.info{background-color:#eef4f7;color:#0063a3}.modus-message.question{background-color:#f4f4f5;color:#464b52}";

let ModusMessage = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /** (optional) The message's type. */
    this.type = 'info';
    this.classByType = new Map([
      ['info', 'info'],
      ['question', 'question'],
    ]);
  }
  render() {
    const className = `modus-message ${this.classByType.get(this.type)}`;
    return (index.h("div", { "aria-label": this.ariaLabel, class: className, role: "note" }, index.h("span", { class: "icon" }, this.type === 'info'
      ? index.h(iconInfo.IconInfo, { color: "#005F9E", size: "18" })
      : this.type === 'question'
        ? index.h(iconHelp.IconHelp, { color: "#6A6976", size: "18" })
        : null), index.h("span", { class: "message" }, index.h("slot", null))));
  }
};
ModusMessage.style = modusMessageCss;

exports.modus_message = ModusMessage;

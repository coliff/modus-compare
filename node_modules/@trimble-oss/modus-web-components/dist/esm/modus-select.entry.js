import { h, r as registerInstance, c as createEvent, g as getElement } from './index-12216e1c.js';

// eslint-disable-next-line
const IconTriangleDown = (props) => {
  var _a, _b, _c;
  return (h("svg", { class: "icon-triangle-down", height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: () => props.onClick(), viewBox: "0 0 10 6", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    h("path", { d: "M0 0.5L4.60606 5.5L9.21212 0.5H0Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976' })));
};

function createGuid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

const modusSelectCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{color:#464b52;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}:host .label-container{align-items:baseline;display:flex}:host .label-container label{color:#252a2e;font-size:0.75rem;margin:0 0.25rem 0.25rem 0}:host .label-container .required{color:#da212c}:host .input-container{position:relative}:host .input-container:hover{cursor:pointer}:host .input-container button{align-items:center;background-color:#fff;border:solid 0.0625rem;border-color:#e0e1e9 #e0e1e9 #6a6e79 #e0e1e9;display:flex;height:2rem;padding:0;position:relative;width:100%}:host .input-container button:hover{cursor:pointer}:host .input-container button:focus-within{border-bottom-color:#217cbb;border-width:0.125rem}:host .input-container button.large{font-size:0.875rem;height:3rem}:host .input-container button.error{border-bottom-color:#da212c;border-width:0.125rem}:host .input-container button.valid{border-bottom-color:#1e8a44;border-width:0.125rem}:host .input-container button .dropdown-text{color:#464b52;font-size:0.875rem;overflow-x:hidden;padding-left:0.5rem;text-overflow:ellipsis;white-space:nowrap}:host .input-container button .icon-triangle-down{margin-left:auto;padding:0 0.5rem}:host .input-container .dropdown-list{background-color:#fff;border:1px solid #e0e1e9;display:none;position:absolute;top:2.125rem;width:100%;z-index:1}:host .input-container .dropdown-list.visible{display:block}:host .input-container .dropdown-list.large{top:3.125rem}:host .input-container .dropdown-list .dropdown-list-item{align-items:center;display:flex;font-size:0.75rem;height:1.25rem;padding-left:0.5rem}:host .input-container .dropdown-list .dropdown-list-item.active{background-color:#e0e1e9}:host .sub-text{font-size:0.625rem;margin-top:0.25rem}:host .sub-text.helper{color:#353a40}:host .sub-text.error{color:#da212c}:host .sub-text.valid{color:#1e8a44}";

let ModusSelect = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.valueChange = createEvent(this, "valueChange", 7);
    /** (optional) The number of visible options in a drop-down list. */
    // @Prop() numberOfOptions = 5;
    /** The options for the dropdown list. */
    this.options = [];
    /** (optional) The input's size. */
    this.size = 'medium';
    this.activeItemIndex = 0;
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large']
    ]);
  }
  documentClickHandler(event) {
    // Close the select when click is outside the current element.
    if (event.defaultPrevented || event.target.closest('modus-select')) {
      return;
    }
    this.hideDropdown();
  }
  elementKeydownHandler(event) {
    if (!this.visible || this.el.shadowRoot.activeElement.tagName !== 'BUTTON') {
      return;
    }
    switch (event.key) {
      case 'ArrowDown':
        this.activeItemIndex = this.activeItemIndex + 1 < this.options.length ? this.activeItemIndex + 1 : this.activeItemIndex;
        break;
      case 'ArrowUp':
        this.activeItemIndex = this.activeItemIndex - 1 > 0 ? this.activeItemIndex - 1 : 0;
        break;
      case 'Enter':
        this.value = this.options[this.activeItemIndex];
        this.activeItemIndex = 0;
        break;
      case 'Tab':
        this.hideDropdown();
        break;
    }
  }
  handleButtonClick() {
    if (this.visible) {
      this.hideDropdown();
    }
    else {
      this.showDropdown();
    }
  }
  handleItemSelect(option) {
    this.value = option;
    this.valueChange.emit(option);
    this.hideDropdown();
    this.el.shadowRoot.querySelector('button').focus();
  }
  hideDropdown() {
    this.visible = false;
    this.activeItemIndex = 0;
  }
  showDropdown() {
    var _a;
    this.visible = true;
    const activeOptionIndex = (_a = this.options) === null || _a === void 0 ? void 0 : _a.findIndex(option => option === this.value);
    if (activeOptionIndex > -1) {
      this.activeItemIndex = activeOptionIndex;
    }
  }
  render() {
    const buttonClass = `${this.classBySize.get(this.size)} ${this.errorText ? 'error' : this.validText ? 'valid' : ''}`;
    const dropdownListClass = `dropdown-list ${this.visible ? 'visible' : 'hidden'} ${this.classBySize.get(this.size)}`;
    const inputContainerClass = `input-container ${this.visible ? 'dropdown-visible' : ''}`;
    return (h("div", { role: "listbox", "aria-disabled": this.disabled, "aria-label": this.ariaLabel, "aria-required": this.required }, this.label || this.required
      ? h("div", { class: 'label-container' }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)
      : null, h("div", { class: inputContainerClass }, h("button", { class: buttonClass, disabled: this.disabled, onClick: () => this.handleButtonClick(), type: "button", "aria-invalid": !!this.errorText }, h("div", { class: "dropdown-text" }, this.value ? this.value[this.optionsDisplayProp] : null), h(IconTriangleDown, { size: '12' })), h("div", { class: dropdownListClass }, this.options.map((option, index) => h("div", { "aria-selected": index === this.activeItemIndex, "aria-label": option[this.optionsDisplayProp], class: `dropdown-list-item ${index === this.activeItemIndex ? 'active' : ''}`, key: createGuid(), onClick: () => this.handleItemSelect(option), onMouseEnter: () => this.activeItemIndex = index }, option[this.optionsDisplayProp])))), this.errorText ? h("label", { class: "sub-text error" }, this.errorText) :
      this.validText ? h("label", { class: "sub-text valid" }, this.validText) :
        this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) :
          null));
  }
  get el() { return getElement(this); }
};
ModusSelect.style = modusSelectCss;

export { ModusSelect as modus_select };

import { h, r as registerInstance, c as createEvent } from './index-12216e1c.js';
import { I as IconCheck } from './icon-check-d31dee3b.js';

// eslint-disable-next-line
const IconIndeterminate = (props) => {
  var _a, _b, _c, _d;
  return (h("svg", { class: "icon-check", width: (_a = props.size) !== null && _a !== void 0 ? _a : 16, height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, viewBox: "-3 0 24 4", onClick: props.onClick ? () => props.onClick() : null, fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    h("path", { d: "M1 3V1H17V3H1Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976', stroke: (_d = props.color) !== null && _d !== void 0 ? _d : '#6A6976' })));
};

const modusCheckboxCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-checkbox{align-items:center;color:#252a2e;cursor:pointer;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem;height:2rem;text-align:center;white-space:nowrap}.modus-checkbox .checkbox{align-items:center;background-color:#fff;border:2px solid #6a6e79;border-radius:2px;display:flex;justify-content:center;margin:0 0.28rem;transition:background-color 0.15s ease-in-out}.modus-checkbox .checkbox.blue-background{background-color:#0063a3;border:2px solid #0063a3}.modus-checkbox .checkbox.disabled{background-color:transparent;border:2px solid #a3a6b1;cursor:default}.modus-checkbox .checkbox.disabled.checked{background-color:#a3a6b1}.modus-checkbox .checkbox .checkmark{align-items:center;display:flex;justify-content:center;transform:scale(0);transition:transform 0.25s ease-in-out;visibility:hidden}.modus-checkbox .checkbox .checkmark.checked{transform:scale(0.75);visibility:visible}.modus-checkbox input{display:none}.modus-checkbox label{align-items:center;display:flex}.modus-checkbox label.disabled{color:#353a40}.modus-checkbox.medium{height:1.5rem}.modus-checkbox.medium .checkbox{height:1rem;width:1rem}.modus-checkbox.small{height:1.125rem}.modus-checkbox.small .checkbox{height:0.75rem;width:0.75rem}.modus-checkbox:hover .checkbox:not(.checked):not(.disabled){border:2px solid #7d808d}.modus-checkbox:active .checkbox:not(.checked):not(.disabled){border:2px solid #252a2e}";

let ModusCheckbox = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.checkboxClick = createEvent(this, "checkboxClick", 7);
    /** (optional) The size of the button */
    this.size = 'medium';
    this.classBySize = new Map([
      ['small', 'small'],
      ['medium', 'medium']
    ]);
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.handleCheckboxClick();
        break;
    }
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Space':
        this.handleCheckboxClick();
        break;
    }
  }
  componentDidRender() {
    this.checkboxInput.indeterminate = this.indeterminate;
  }
  handleCheckboxClick() {
    if (this.disabled) {
      return;
    }
    this.updateChecked();
    this.checkboxClick.emit(this.checked);
  }
  updateChecked() {
    this.checked = !this.checked;
    this.checkboxInput.checked = this.checked;
    this.indeterminate = false;
  }
  render() {
    var _a;
    const className = `modus-checkbox ${(_a = this.classBySize) === null || _a === void 0 ? void 0 : _a.get(this.size)}`;
    return (h("div", { class: className, onClick: () => this.handleCheckboxClick(), tabIndex: 0 }, h("div", { class: `${this.checked || this.indeterminate ? 'checkbox blue-background' : 'checkbox'} ${this.disabled ? 'disabled' : ''}` }, this.indeterminate
      ? h("div", { class: 'checkmark checked' }, h(IconIndeterminate, { color: "#FFFFFF", size: "24" }))
      : h("div", { class: this.checked ? 'checkmark checked' : 'checkmark' }, h(IconCheck, { color: "#FFFFFF", size: "24" }))), h("input", { "aria-checked": this.checked, "aria-disabled": this.disabled, "aria-label": this.ariaLabel, checked: this.checked, disabled: this.disabled, ref: (el) => this.checkboxInput = el, type: "checkbox" }), this.label ? h("label", { class: this.disabled ? 'disabled' : null }, this.label) : null));
  }
};
ModusCheckbox.style = modusCheckboxCss;

export { ModusCheckbox as modus_checkbox };

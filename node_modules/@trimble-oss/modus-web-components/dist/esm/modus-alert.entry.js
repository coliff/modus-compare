import { r as registerInstance, c as createEvent, h } from './index-12216e1c.js';
import { I as IconClose } from './icon-close-f856b55d.js';
import { I as IconWarning, a as IconCheckCircle, b as IconError } from './icon-check-circle-dacb2738.js';
import { I as IconInfo } from './icon-info-ab73694e.js';

const modusAlertCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");div.alert{align-items:center;background-color:#fff;border:1px solid;border-radius:2px;border-left-width:0.5rem;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:56px;padding:0 1rem;position:relative}div.alert.type-error{border-color:#da212c;color:#da212c}div.alert.type-error .icon-check-circle path,div.alert.type-error .icon-error path,div.alert.type-error .icon-info path,div.alert.type-error .icon-warning path{fill:#da212c}div.alert.type-info{border-color:#0063a3;color:#0063a3}div.alert.type-info .icon-check-circle path,div.alert.type-info .icon-error path,div.alert.type-info .icon-info path,div.alert.type-info .icon-warning path{fill:#0063a3}div.alert.type-info-gray{border-color:#464b52;color:#464b52}div.alert.type-info-gray .icon-check-circle path,div.alert.type-info-gray .icon-error path,div.alert.type-info-gray .icon-info path,div.alert.type-info-gray .icon-warning path{fill:#464b52}div.alert.type-info-gray-dark{border-color:#252a2e;color:#252a2e}div.alert.type-info-gray-dark .icon-check-circle path,div.alert.type-info-gray-dark .icon-error path,div.alert.type-info-gray-dark .icon-info path,div.alert.type-info-gray-dark .icon-warning path{fill:#252a2e}div.alert.type-success{border-color:#006638;color:#006638}div.alert.type-success .icon-check-circle path,div.alert.type-success .icon-error path,div.alert.type-success .icon-info path,div.alert.type-success .icon-warning path{fill:#006638}div.alert.type-warning{border-color:#fbad26;color:#252a2e}div.alert.type-warning .icon-check-circle path,div.alert.type-warning .icon-error path,div.alert.type-warning .icon-info path,div.alert.type-warning .icon-warning path{fill:#252a2e}div.alert .message{font-size:0.875rem;font-weight:700}div.alert .icon-check-circle,div.alert .icon-error,div.alert .icon-info,div.alert .icon-warning{margin-right:8px}div.alert .icon-close{cursor:pointer;margin-left:auto}div.alert .icon-close:hover g path{fill:#6a6e79}div.alert .icon-close:active g path{fill:#252a2e}";

let ModusAlert = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dismissClick = createEvent(this, "dismissClick", 7);
    /** (optional) The type of alert, sets the color and icon to render */
    this.type = 'info';
    this.classByType = new Map([
      ['error', 'type-error'],
      ['info', 'type-info'],
      ['info-gray', 'type-info-gray'],
      ['info-gray-dark', 'type-info-gray-dark'],
      ['success', 'type-success'],
      ['warning', 'type-warning'],
    ]);
    this.infoTypes = ['info', 'info-gray', 'info-gray-dark'];
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Escape':
        if (!this.dismissible) {
          return;
        }
        this.dismissClick.emit();
        break;
    }
  }
  render() {
    const className = `alert ${this.classByType.get(this.type)}`;
    const iconSize = '24';
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "alert", tabIndex: 0 }, this.type === 'error' ? h(IconError, { size: iconSize }) : null, this.infoTypes.includes(this.type) ? h(IconInfo, { size: iconSize }) : null, this.type === 'success' ? h(IconCheckCircle, { size: iconSize }) : null, this.type === 'warning' ? h(IconWarning, { size: iconSize }) : null, h("div", { class: "message" }, this.message), this.dismissible ? h(IconClose, { size: "18", onClick: () => this.dismissClick.emit() }) : null));
  }
};
ModusAlert.style = modusAlertCss;

export { ModusAlert as modus_alert };

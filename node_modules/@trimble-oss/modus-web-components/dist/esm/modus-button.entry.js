import { r as registerInstance, c as createEvent, h, g as getElement } from './index-12216e1c.js';

const modusButtonCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");button{align-items:center;border:0.0625rem solid transparent;border-radius:0.125rem;cursor:default;display:inline-flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-weight:600;justify-content:center;padding:0;position:relative;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;user-select:none;white-space:nowrap}button:hover{cursor:pointer}button:disabled{cursor:default;opacity:0.3}button.size-small{font-size:12px;height:24px;padding:0 8px}button.size-medium{font-size:14px;height:32px;padding:0 16px}button.size-large{font-size:16px;height:48px;padding:0 24px}button.style-borderless{background-color:transparent;color:#0e416c;fill:#0e416c}button.style-borderless:hover:not([disabled]){background-color:#f1f1f6}button.style-borderless:active:not([disabled]){background-color:#dcedf9}button.style-fill.color-danger{background-color:#da212c;border-color:#da212c;color:#fff;fill:#fff}button.style-fill.color-danger:hover:not([disabled]){background-color:#e86363;border-color:#e86363}button.style-fill.color-danger:active:not([disabled]){background-color:#ab1f26;border-color:#ab1f26}button.style-fill.color-primary{background-color:#0063a3;border-color:#0063a3;color:#fff;fill:#fff}button.style-fill.color-primary:hover:not([disabled]){background-color:#217cbb;border-color:#217cbb}button.style-fill.color-primary:active:not([disabled]){background-color:#0e416c;border-color:#0e416c}button.style-fill.color-secondary{background-color:#6a6e79;border-color:#6a6e79;color:#fff;fill:#fff}button.style-fill.color-secondary:hover:not([disabled]){background-color:#6a6e79;border-color:#6a6e79}button.style-fill.color-secondary:active:not([disabled]){background-color:#464b52;border-color:#464b52}button.style-fill.color-tertiary{background-color:#cbcdd6;border-color:#cbcdd6;color:#171c1e;fill:#171c1e}button.style-fill.color-tertiary:hover:not([disabled]){background-color:#e0e1e9;border-color:#e0e1e9}button.style-fill.color-tertiary:active:not([disabled]){background-color:#b7b9c3;border-color:#b7b9c3}button.style-fill.color-warning{background-color:#fbad26;border-color:#fbad26;color:#fff;fill:#fff}button.style-fill.color-warning:hover:not([disabled]){background-color:#fec157;border-color:#fec157}button.style-fill.color-warning:active:not([disabled]){background-color:#e49325;border-color:#e49325}button.style-outline.color-primary{background-color:transparent;border-color:#0063a3;color:#0063a3;fill:#0063a3}button.style-outline.color-primary:hover:not([disabled]){background-color:#dde7f1;border-color:#017ed1}button.style-outline.color-primary:active:not([disabled]){background-color:#d2dfec;border-color:#005085}button.style-outline.color-secondary{background-color:transparent;border-color:#252a2e;color:#252a2e;fill:#252a2e}button.style-outline.color-secondary:hover:not([disabled]){background-color:#e0e0e4}button.style-outline.color-secondary:active:not([disabled]){background-color:#b7b9c3;border-color:#464b52}";

let ModusButton = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.buttonClick = createEvent(this, "buttonClick", 7);
    /** (optional) The style of the button */
    this.buttonStyle = 'fill';
    /** (optional) The color of the button. */
    this.color = 'default';
    /** (optional) The size of the button. */
    this.size = 'medium';
    this.classByButtonStyle = new Map([
      ['borderless', 'style-borderless'],
      ['fill', 'style-fill'],
      ['outline', 'style-outline'],
    ]);
    this.classByColor = new Map([
      ['danger', 'color-danger'],
      ['default', 'color-tertiary'],
      ['primary', 'color-primary'],
      ['secondary', 'color-secondary'],
      ['warning', 'color-warning'],
    ]);
    this.classBySize = new Map([
      ['small', 'size-small'],
      ['medium', 'size-medium'],
      ['large', 'size-large'],
    ]);
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Space':
        this.buttonClick.emit();
        break;
    }
  }
  render() {
    const className = `${this.classBySize.get(this.size)} ${this.classByColor.get(this.color)} ${this.classByButtonStyle.get(this.buttonStyle)}`;
    return (h("button", { "aria-disabled": this.disabled, "aria-label": this.ariaLabel, "aria-pressed": this.pressed, class: className, disabled: this.disabled, onClick: () => !this.disabled ? this.buttonClick.emit() : null, onKeyDown: () => this.pressed = true, onKeyUp: () => this.pressed = false, onMouseDown: () => this.pressed = true, onMouseUp: () => this.pressed = false, role: "button" }, h("slot", null)));
  }
  get el() { return getElement(this); }
};
ModusButton.style = modusButtonCss;

export { ModusButton as modus_button };

import { r as registerInstance, c as createEvent, h } from './index-12216e1c.js';
import { I as IconSearch } from './icon-search-96c9991e.js';
import { I as IconClose } from './icon-close-f856b55d.js';

const modusTextInputCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-text-input{display:inline-flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";width:100%}.modus-text-input label{color:#252a2e;font-size:0.75rem;margin-bottom:0.25rem}.modus-text-input label span{color:#6a6e79;margin:0.25rem}.modus-text-input .label-container{display:flex}.modus-text-input .label-container .required{bottom:0.0625rem;margin-left:0.25rem;position:relative}.modus-text-input .input-container{align-items:center;background-color:#fff;border:solid;border-color:#e0e1e9 #e0e1e9 #6a6e79 #e0e1e9;border-width:0.0625rem;display:flex;flex-direction:row;height:2rem;width:100%}.modus-text-input .input-container svg{padding:0 0.375rem}.modus-text-input .input-container input{border:#fff;font-size:0.75rem;outline:none;padding:0 0.5rem;width:100%}.modus-text-input .input-container input.has-left-icon{padding-left:0}.modus-text-input .input-container input.has-right-icon{padding-right:0}.modus-text-input .input-container input::placeholder{color:#7d808d;font-style:italic}.modus-text-input .input-container .icons{align-items:center;background-color:#fff;color:#171c1e;display:flex;font-size:1rem;justify-content:center;width:2rem}.modus-text-input .input-container .icons.clear{cursor:pointer}.modus-text-input .input-container .icons.clear:hover svg path{fill:#6a6e79}.modus-text-input .input-container .icons.clear:active svg path{fill:#252a2e}.modus-text-input .input-container:hover{cursor:text}.modus-text-input .input-container:focus-within,.modus-text-input .input-container.error,.modus-text-input .input-container.valid{border:solid;border-width:0.0625rem 0.0625rem 0.125rem 0.0625rem;height:1.9375rem}.modus-text-input .input-container:focus-within{border-color:#e0e1e9 #e0e1e9 #0063a3 #e0e1e9}.modus-text-input .input-container.error{border-color:#e0e1e9 #e0e1e9 #da212c #e0e1e9}.modus-text-input .input-container.valid{border-color:#e0e1e9 #e0e1e9 #1e8a44 #e0e1e9}.modus-text-input .input-container.large{height:3rem}.modus-text-input .input-container.large input{font-size:0.875rem}.modus-text-input .input-container.large:focus-within,.modus-text-input .input-container.large.error,.modus-text-input .input-container.large.valid{height:2.9375rem}.modus-text-input .sub-text{font-size:0.625rem;margin-top:0.25rem}.modus-text-input .sub-text.helper{color:#353a40}.modus-text-input .sub-text.error{color:#da212c}.modus-text-input .sub-text.valid{color:#1e8a44}.modus-text-input span.required{color:#da212c}.modus-text-input.large{font-size:0.875rem;height:48px}.modus-text-input.disabled{pointer-events:none}.modus-text-input.disabled .input-container{background-color:#a3a6b1}.modus-text-input.disabled .input-container .icons{background-color:#a3a6b1;cursor:default}.modus-text-input.disabled .input-container .icons.clear{visibility:hidden}.modus-text-input.disabled .input-container input{background-color:#a3a6b1;border-radius:0}";

let ModusTextInput = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.valueChange = createEvent(this, "valueChange", 7);
    /** (optional) Whether the input has a clear button. */
    this.clearable = true;
    /** (optional) The input's size. */
    this.size = 'medium';
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large']
    ]);
  }
  handleClear() {
    this.textInput.value = null;
    this.value = null;
    this.valueChange.emit(null);
  }
  handleOnInput(event) {
    const value = event.currentTarget.value;
    this.value = value;
    this.valueChange.emit(value);
  }
  render() {
    const className = `modus-text-input ${this.disabled ? 'disabled' : ''}`;
    return (h("div", { "aria-disabled": this.disabled, "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel, "aria-placeholder": this.placeholder, "aria-readonly": this.readOnly, "aria-required": this.required, class: className }, this.label || this.required
      ? h("div", { class: 'label-container' }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)
      : null, h("div", { class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`, onClick: () => this.textInput.focus() }, this.includeSearchIcon ? h(IconSearch, { size: "16" }) : null, h("input", { class: `${this.includeSearchIcon ? 'has-left-icon' : ''} ${this.clearable ? 'has-right-icon' : null}`, disabled: this.disabled, maxlength: this.maxLength, minlength: this.minLength, onInput: (event) => this.handleOnInput(event), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => this.textInput = el, tabIndex: 0, type: "text", value: this.value }), this.clearable && !this.readOnly && !!this.value
      ? h("span", { class: "icons clear" }, h(IconClose, { onClick: () => this.handleClear(), size: "16" }))
      : h("span", { class: "icons" })), this.errorText ? h("label", { class: "sub-text error" }, this.errorText) :
      this.validText ? h("label", { class: "sub-text valid" }, this.validText) :
        this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) :
          null));
  }
};
ModusTextInput.style = modusTextInputCss;

export { ModusTextInput as modus_text_input };

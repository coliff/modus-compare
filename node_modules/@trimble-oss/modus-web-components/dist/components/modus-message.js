import { HTMLElement, h, proxyCustomElement } from '@stencil/core/internal/client';
import { I as IconInfo } from './icon-info.js';
import { I as IconHelp } from './icon-help.js';

const modusMessageCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-message{align-items:center;border-radius:0.125rem;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;padding:0.5rem}.modus-message .icon{align-items:center;display:flex;margin-right:0.5rem}.modus-message.info{background-color:#eef4f7;color:#0063a3}.modus-message.question{background-color:#f4f4f5;color:#464b52}";

let ModusMessage$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /** (optional) The message's type. */
    this.type = 'info';
    this.classByType = new Map([
      ['info', 'info'],
      ['question', 'question'],
    ]);
  }
  render() {
    const className = `modus-message ${this.classByType.get(this.type)}`;
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "note" }, h("span", { class: "icon" }, this.type === 'info'
      ? h(IconInfo, { color: "#005F9E", size: "18" })
      : this.type === 'question'
        ? h(IconHelp, { color: "#6A6976", size: "18" })
        : null), h("span", { class: "message" }, h("slot", null))));
  }
  static get style() { return modusMessageCss; }
};
ModusMessage$1 = /*@__PURE__*/ proxyCustomElement(ModusMessage$1, [1, "modus-message", {
    "ariaLabel": [1, "aria-label"],
    "type": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-message"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-message":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusMessage$1);
      }
      break;
  } });
}

const ModusMessage = ModusMessage$1;
const defineCustomElement = defineCustomElement$1;

export { ModusMessage, defineCustomElement };

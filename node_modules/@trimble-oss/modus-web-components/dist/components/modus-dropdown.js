import { HTMLElement, createEvent, h, proxyCustomElement } from '@stencil/core/internal/client';

const modusDropdownCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}:host .dropdown:hover{cursor:pointer}:host .dropdown-list{display:none;max-height:200px;max-width:300px;overflow-x:hidden;overflow-y:auto;position:absolute;z-index:1}:host .dropdown-list.visible{display:block}:host .dropdown-list.top{bottom:0}:host .dropdown-list.right{top:0}:host .dropdown-list.left{right:0;top:0}";

let ModusDropdown$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.dropdownClose = createEvent(this, "dropdownClose", 7);
    /** (optional) The placement of the dropdown in related to the toggleElement */
    this.placement = 'bottom';
    this.classByPlacement = new Map([
      ['top', 'top'],
      ['right', 'right'],
      ['bottom', 'bottom'],
      ['left', 'left'],
    ]);
  }
  documentClickHandler(event) {
    if (!event.defaultPrevented) {
      if (event.target.closest(`#${this.toggleElementId}`)) {
        this.visible = !this.visible;
      }
      else {
        this.visible = false;
      }
      if (!this.visible) {
        this.dropdownClose.emit();
      }
    }
  }
  componentWillLoad() {
    this.toggleElement = document.querySelector(`#${this.toggleElementId}`);
    if (!this.toggleElement) {
      throw Error('matching element not found for toggle-element-id');
    }
  }
  render() {
    const listContainerClass = `dropdown-list ${this.visible ? 'visible' : 'hidden'} ${this.classByPlacement.get(this.placement)}`;
    const left = this.placement === 'right' ? `${this.toggleElement.offsetWidth}px` : 'unset';
    const width = `${this.toggleElement.offsetWidth ? this.toggleElement.offsetWidth : 0}px`;
    return (h("div", { "aria-label": this.ariaLabel, class: "dropdown", role: "listbox" }, h("slot", { name: "dropdownToggle" }), h("div", { class: listContainerClass, style: { 'left': left, 'min-width': width } }, h("slot", { name: "dropdownList" }))));
  }
  static get style() { return modusDropdownCss; }
};
ModusDropdown$1 = /*@__PURE__*/ proxyCustomElement(ModusDropdown$1, [1, "modus-dropdown", {
    "ariaLabel": [1, "aria-label"],
    "disabled": [4],
    "placement": [1],
    "toggleElementId": [1, "toggle-element-id"],
    "toggleElement": [32],
    "visible": [32]
  }, [[4, "click", "documentClickHandler"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-dropdown"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-dropdown":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusDropdown$1);
      }
      break;
  } });
}

const ModusDropdown = ModusDropdown$1;
const defineCustomElement = defineCustomElement$1;

export { ModusDropdown, defineCustomElement };

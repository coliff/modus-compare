import { HTMLElement, h, proxyCustomElement } from '@stencil/core/internal/client';

const modusNavbarAppsMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.apps-menu{background-color:#fff;border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);display:flex;flex-direction:column;max-width:384px;padding:1.5rem;position:absolute;right:0;top:44px;z-index:100;align-items:flex-start;cursor:default;width:max-content}.apps-menu.reverse{left:0}.apps-menu .app{border-radius:0.125rem;cursor:default;display:flex;padding:0.25rem;width:100%}.apps-menu .app:hover{background-color:#e0e1e9;cursor:pointer}.apps-menu .app:active{background-color:#b7b9c3}.apps-menu .app:not(:last-child){margin-bottom:0.5rem}.apps-menu .app img{height:48px;margin-right:0.75rem;width:48px}.apps-menu .app .right{align-self:center}.apps-menu .app .right .name{font-size:0.875rem;font-weight:600}.apps-menu .app .right .description{font-size:0.75rem}";

let ModusNavbarAppsMenu = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
  }
  clickAppHandler(app) {
    window.open(app.url, '_blank');
  }
  render() {
    var _a;
    const direction = this.reverse ? 'reverse' : '';
    return (h("div", { class: `apps-menu ${direction}`, onClick: (event) => event.preventDefault() }, (_a = this.apps) === null || _a === void 0 ? void 0 : _a.map((app) => h("div", { class: "app", onClick: () => this.clickAppHandler(app) }, h("img", { src: app.logoUrl }), h("div", { class: "right" }, h("div", { class: "name" }, app.name), app.description ? h("div", { class: "description" }, app.description) : null)))));
  }
  static get style() { return modusNavbarAppsMenuCss; }
};
ModusNavbarAppsMenu = /*@__PURE__*/ proxyCustomElement(ModusNavbarAppsMenu, [1, "modus-navbar-apps-menu", {
    "apps": [16],
    "reverse": [4]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-navbar-apps-menu"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-navbar-apps-menu":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusNavbarAppsMenu);
      }
      break;
  } });
}

export { ModusNavbarAppsMenu as M, defineCustomElement as d };

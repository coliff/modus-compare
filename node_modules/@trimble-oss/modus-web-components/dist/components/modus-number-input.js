import { HTMLElement, createEvent, h, proxyCustomElement } from '@stencil/core/internal/client';

const modusNumberInputCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-number-input{display:inline-flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";width:100%}.modus-number-input label{color:#252a2e;font-size:0.75rem;margin-bottom:0.25rem}.modus-number-input label span{color:#6a6e79;margin:0.25rem}.modus-number-input .label-container{align-items:baseline;display:flex}.modus-number-input .label-container .required{color:#da212c;margin-left:0.25rem}.modus-number-input .input-container{align-items:center;background-color:#fff;border:0.0625rem solid #e0e1e9;border-bottom-color:#6a6e79;display:flex;flex-direction:row;height:32px}.modus-number-input .input-container input{border:none;outline:0;padding:0 0.5rem;width:100%}.modus-number-input .input-container:focus-within,.modus-number-input .input-container.error,.modus-number-input .input-container.valid{border:solid 0.0625rem;border-bottom-width:0.125rem;height:31px}.modus-number-input .input-container:focus-within{border-color:#e0e1e9;border-bottom-color:#217cbb}.modus-number-input .input-container.error{border-color:#e0e1e9;border-bottom-color:#da212c}.modus-number-input .input-container.valid{border-color:#e0e1e9;border-bottom-color:#1e8a44}.modus-number-input .input-container.large{height:48px}.modus-number-input .input-container.large input{font-size:0.875rem;height:47px}.modus-number-input .input-container.large:focus-within,.modus-number-input .input-container.large.error,.modus-number-input .input-container.large.valid{height:47px}.modus-number-input .sub-text{font-size:0.625rem;margin-top:0.25rem}.modus-number-input .sub-text.helper{color:#353a40}.modus-number-input .sub-text.error{color:#da212c}.modus-number-input .sub-text.valid{color:#1e8a44}.modus-number-input.disabled{pointer-events:none}.modus-number-input.disabled .input-container{background-color:#a3a6b1}.modus-number-input.disabled .input-container input{background-color:#a3a6b1}";

let ModusNumberInput$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.valueChange = createEvent(this, "valueChange", 7);
    /** (optional) The input's size. */
    this.size = 'medium';
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large']
    ]);
  }
  handleOnInput() {
    this.value = this.numberInput.value;
    this.valueChange.emit(this.value);
  }
  watchValue(newValue, oldValue) {
    if (isNaN(+newValue)) {
      this.value = oldValue;
      console.error(`${newValue} is not a number.`);
    }
    else {
      this.value = newValue;
    }
  }
  render() {
    const className = `modus-number-input ${this.disabled ? 'disabled' : ''}`;
    const inputContainerClassName = `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`;
    return (h("div", { "aria-disabled": this.disabled, "aria-label": this.ariaLabel, "aria-placeholder": this.placeholder, "aria-invalid": !!this.errorText, "aria-readonly": this.readOnly, "aria-required": this.required, "aria-valuemax": this.maxValue, "aria-valuemin": this.minValue, "aria-valuenow": this.value, class: className }, this.label || this.required
      ? h("div", { class: "label-container" }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)
      : null, h("div", { class: inputContainerClassName }, h("input", { disabled: this.disabled, max: this.maxValue, min: this.minValue, onInput: () => this.handleOnInput(), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => this.numberInput = el, step: this.step, tabIndex: 0, type: "number", value: this.value })), this.errorText ? h("label", { class: "sub-text error" }, this.errorText) :
      this.validText ? h("label", { class: "sub-text valid" }, this.validText) :
        this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) :
          null));
  }
  static get watchers() { return {
    "value": ["watchValue"]
  }; }
  static get style() { return modusNumberInputCss; }
};
ModusNumberInput$1 = /*@__PURE__*/ proxyCustomElement(ModusNumberInput$1, [1, "modus-number-input", {
    "ariaLabel": [1, "aria-label"],
    "disabled": [4],
    "errorText": [1, "error-text"],
    "helperText": [1, "helper-text"],
    "label": [1],
    "maxValue": [2, "max-value"],
    "minValue": [2, "min-value"],
    "placeholder": [1],
    "readOnly": [4, "read-only"],
    "required": [4],
    "size": [1],
    "step": [2],
    "validText": [1, "valid-text"],
    "value": [1025]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-number-input"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-number-input":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusNumberInput$1);
      }
      break;
  } });
}

const ModusNumberInput = ModusNumberInput$1;
const defineCustomElement = defineCustomElement$1;

export { ModusNumberInput, defineCustomElement };

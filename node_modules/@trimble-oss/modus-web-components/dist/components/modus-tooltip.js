import { HTMLElement, h, proxyCustomElement } from '@stencil/core/internal/client';

const modusTooltipCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-tooltip{align-items:center;display:inline-flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";justify-content:center;position:relative}.modus-tooltip .text{background-color:#252a2e;border-radius:0.125rem;color:#fff;font-size:0.75rem;opacity:0;padding:0.375rem 0.5rem;position:absolute;text-align:center;transition:opacity 0.3s ease-in-out;visibility:hidden;width:max-content;z-index:1}.modus-tooltip .text::after{border-style:solid;border-width:0.3125rem;content:\"\";position:absolute}.modus-tooltip.top .text{top:-2.125rem}.modus-tooltip.top .text::after{border-color:#252a2e transparent transparent transparent;left:50%;margin-left:-0.313rem;top:100%}.modus-tooltip.bottom .text{bottom:-2.125rem}.modus-tooltip.bottom .text::after{border-color:transparent transparent #252a2e transparent;bottom:100%;left:50%;margin-left:-0.313rem}.modus-tooltip.left .text{right:calc(100% + 0.375rem)}.modus-tooltip.left .text::after{border-color:transparent transparent transparent #252a2e;left:100%;margin-top:-0.313rem;top:50%}.modus-tooltip.right .text{left:calc(100% + 0.375rem)}.modus-tooltip.right .text::after{border-color:transparent #252a2e transparent transparent;margin-top:-0.313rem;right:100%;top:50%}.modus-tooltip:hover .text{opacity:1;visibility:visible}";

let ModusTooltip$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /** (optional) The tooltip's position relative to its content. */
    this.position = 'top';
  }
  render() {
    const className = `modus-tooltip ${this.position}`;
    return (h("div", { class: className }, h("slot", null), h("div", { "aria-label": this.ariaLabel, class: 'text', role: "tooltip" }, this.text)));
  }
  static get style() { return modusTooltipCss; }
};
ModusTooltip$1 = /*@__PURE__*/ proxyCustomElement(ModusTooltip$1, [1, "modus-tooltip", {
    "ariaLabel": [1, "aria-label"],
    "position": [1],
    "text": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-tooltip":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusTooltip$1);
      }
      break;
  } });
}

const ModusTooltip = ModusTooltip$1;
const defineCustomElement = defineCustomElement$1;

export { ModusTooltip, defineCustomElement };

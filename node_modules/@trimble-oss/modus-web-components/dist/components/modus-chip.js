import { h, HTMLElement, createEvent, proxyCustomElement } from '@stencil/core/internal/client';
import { I as IconCheck } from './icon-check.js';

// eslint-disable-next-line
const IconRemove = (props) => {
  var _a, _b, _c;
  return (h("svg", { class: "icon-remove", height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M3 12C3 7.03691 7.03691 3 12 3C16.9623 3 21 7.03691 21 12C21 16.9623 16.9623 21 12 21C7.03691 21 3 16.9623 3 12ZM15.8889 7L17 8.11113L13.1111 12L17 15.8889L15.8889 17L12 13.1111L8.11113 17L7 15.8889L10.8889 12L7 8.11113L8.11113 7L12 10.8889L15.8889 7Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976' }),
    h("mask", { id: "mask0", "mask-type": "alpha", maskUnits: "userSpaceOnUse", x: "3", y: "3", width: "18", height: "18" },
      h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M3 12C3 7.03691 7.03691 3 12 3C16.9623 3 21 7.03691 21 12C21 16.9623 16.9623 21 12 21C7.03691 21 3 16.9623 3 12ZM15.8889 7L17 8.11113L13.1111 12L17 15.8889L15.8889 17L12 13.1111L8.11113 17L7 15.8889L10.8889 12L7 8.11113L8.11113 7L12 10.8889L15.8889 7Z", fill: "white" })),
    h("g", { mask: "url(#mask0)" })));
};

const modusChipCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-chip{align-items:center;background-color:#b7b9c3;border:0.0625rem solid #b7b9c3;border-radius:1rem;cursor:pointer;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:1.625rem;justify-content:center;padding:0.125rem 0.25rem;vertical-align:middle}.modus-chip.no-left-icon{padding-left:1rem}.modus-chip.no-right-icon{padding-right:1rem}.modus-chip.large{height:2rem}.modus-chip img{border-radius:50%;height:1.5rem;width:1.5rem}.modus-chip span{color:#252a2e;font-size:0.8125rem;font-weight:600;margin:0 0.25rem}.modus-chip:hover{background-color:#cbcdd6;border:0.0625rem solid #cbcdd6}.modus-chip:hover.style-outline{background-color:#fff}.modus-chip:active{background-color:#a3a6b1}.modus-chip:active.style-outline{background-color:#cbcdd6}.modus-chip:active span{color:#000}.modus-chip:active svg path{fill:#000}.modus-chip.has-error{background-color:#fbd4d7;border:0.0625rem solid #fbd4d7}.modus-chip.has-error.style-outline{background-color:#fbd4d7;border:0.0625rem solid #da212c}.modus-chip.has-error span{color:#b44e2a}.modus-chip.has-error svg path{fill:#b44e2a}.modus-chip.has-error:active{background-color:#a3a6b1;border:0.0625rem solid #a3a6b1}.modus-chip.has-error:active.style-outline{background-color:#cbcdd6}.modus-chip.has-error:active span{color:#000}.modus-chip.has-error:active svg path{fill:#000}.modus-chip.style-outline{background-color:transparent;border:0.0625rem solid #6a6e79}.modus-chip.disabled{opacity:0.3;pointer-events:none}";

let ModusChip$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.chipClick = createEvent(this, "chipClick", 7);
    this.closeClick = createEvent(this, "closeClick", 7);
    /** (optional) The chip's style. */
    this.chipStyle = 'solid';
    /** (optional) Whether the chip is disabled. */
    this.disabled = false;
    /** (optional) Whether the chip has an error. */
    this.hasError = false;
    /** (optional) Whether to show the checkmark. */
    this.showCheckmark = false;
    /** (optional) Whether to show the close icon. */
    this.showClose = false;
    /** (optional) The chip's size. */
    this.size = 'medium';
    this.classByChipStyle = new Map([
      ['outline', 'style-outline'],
      ['solid', 'style-solid'],
    ]);
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Escape':
        if (!this.showClose) {
          return;
        }
        this.closeClick.emit(event);
        break;
    }
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.chipClick.emit(event);
        break;
    }
  }
  onChipClick(event) {
    if (event.defaultPrevented) {
      return;
    } // Don't emit chipClick if closeClick has emitted.
    this.chipClick.emit(event);
  }
  onCloseClick(event) {
    this.closeClick.emit(event);
    event.preventDefault();
  }
  render() {
    const chipClass = `
      modus-chip ${this.disabled ? 'disabled' : ''}
      ${this.hasError ? 'has-error' : ''}
      ${this.classByChipStyle.get(this.chipStyle)}
      ${this.classBySize.get(this.size)}
      ${!this.showCheckmark && !this.imageUrl ? 'no-left-icon' : null}
      ${!this.showClose ? 'no-right-icon' : null}
    `;
    return (h("div", { "aria-disabled": this.disabled, "aria-label": this.ariaLabel, class: chipClass, onClick: this.disabled ? null : (event) => this.onChipClick(event), tabIndex: 0 }, this.imageUrl ? h("img", { src: this.imageUrl }) :
      this.showCheckmark ? h(IconCheck, { size: '24' }) :
        null, h("span", null, this.value), this.showClose ? h(IconRemove, { onClick: this.disabled ? null : (event) => this.onCloseClick(event), size: '24' }) :
      null));
  }
  static get style() { return modusChipCss; }
};
ModusChip$1 = /*@__PURE__*/ proxyCustomElement(ModusChip$1, [1, "modus-chip", {
    "ariaLabel": [1, "aria-label"],
    "chipStyle": [1, "chip-style"],
    "disabled": [4],
    "hasError": [4, "has-error"],
    "imageUrl": [1, "image-url"],
    "showCheckmark": [4, "show-checkmark"],
    "showClose": [4, "show-close"],
    "size": [1],
    "value": [1]
  }, [[0, "keyup", "elementKeyupHandler"], [0, "keydown", "elementKeydownHandler"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-chip"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-chip":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusChip$1);
      }
      break;
  } });
}

const ModusChip = ModusChip$1;
const defineCustomElement = defineCustomElement$1;

export { ModusChip, defineCustomElement };

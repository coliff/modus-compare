import { HTMLElement, h, proxyCustomElement } from '@stencil/core/internal/client';

const modusCardCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");article{background-color:#fff;border:0.0625rem solid #f1f1f6;border-radius:0.125rem;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";overflow:hidden;position:relative}article:hover{box-shadow:0 0 8px rgba(36, 35, 45, 0.3)}";

let ModusCard$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /** (optional) The height of the card. */
    this.height = '269px';
    /** (optional) The width of the card. */
    this.width = '240px';
  }
  render() {
    return (h("article", { "aria-label": this.ariaLabel, style: { 'height': this.height, 'width': this.width } }, h("slot", null)));
  }
  static get style() { return modusCardCss; }
};
ModusCard$1 = /*@__PURE__*/ proxyCustomElement(ModusCard$1, [1, "modus-card", {
    "ariaLabel": [1, "aria-label"],
    "height": [1],
    "width": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-card"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-card":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusCard$1);
      }
      break;
  } });
}

const ModusCard = ModusCard$1;
const defineCustomElement = defineCustomElement$1;

export { ModusCard, defineCustomElement };

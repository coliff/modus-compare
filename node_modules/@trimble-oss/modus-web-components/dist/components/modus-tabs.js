import { HTMLElement, createEvent, h, proxyCustomElement } from '@stencil/core/internal/client';

const modusTabsCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-tabs{border:solid #cbcdd6;border-width:0 0 0.0625rem 0;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";justify-content:flex-start}.modus-tabs.medium{height:48px}.modus-tabs.small{height:32px}.modus-tabs .tab{align-items:center;background-color:#fff;border:solid transparent 0.1875rem;border-radius:0.125rem 0.125rem 0 0;color:#252a2e;display:flex;font-weight:600;justify-content:center;overflow:hidden;text-transform:uppercase;text-wrap:none;user-select:none}.modus-tabs .tab.medium{font-size:0.875rem;padding:0 32px}.modus-tabs .tab.small{font-size:0.75rem;padding:0 1rem}.modus-tabs .tab.active{border-color:transparent transparent #217cbb transparent;color:#217cbb}.modus-tabs .tab:hover{background-color:#dcedf9;color:#217cbb;cursor:pointer}";

let ModusTabs$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.tabChange = createEvent(this, "tabChange", 7);
    /* (optional) The tabs' size. */
    this.size = 'medium';
    /** The tabs to render. */
    this.tabs = [];
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['small', 'small'],
    ]);
  }
  handleKeyDown(event, id) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleTabChange(id);
  }
  handleTabChange(id) {
    if (id === this.tabs.find(tab => tab.active).id) {
      return;
    }
    this.tabs = this.tabs.map(tab => {
      return Object.assign(Object.assign({}, tab), { active: tab.id === id });
    });
    this.tabChange.emit(id);
  }
  render() {
    const tabs = this.tabs.map((tab) => {
      return (h("div", { class: `tab ${tab.active ? 'active' : ''} ${this.classBySize.get(this.size)}`, onClick: () => this.handleTabChange(tab.id), onKeyDown: (event) => this.handleKeyDown(event, tab.id), tabIndex: 0 }, tab.label));
    });
    return (h("div", { "aria-label": this.ariaLabel, class: `modus-tabs ${this.classBySize.get(this.size)}` }, tabs));
  }
  static get style() { return modusTabsCss; }
};
ModusTabs$1 = /*@__PURE__*/ proxyCustomElement(ModusTabs$1, [1, "modus-tabs", {
    "ariaLabel": [1, "aria-label"],
    "size": [1],
    "tabs": [1040]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-tabs"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-tabs":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusTabs$1);
      }
      break;
  } });
}

const ModusTabs = ModusTabs$1;
const defineCustomElement = defineCustomElement$1;

export { ModusTabs, defineCustomElement };

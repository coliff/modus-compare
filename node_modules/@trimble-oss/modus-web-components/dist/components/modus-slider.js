import { HTMLElement, createEvent, h, proxyCustomElement } from '@stencil/core/internal/client';

const modusSliderCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-slider{display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:1.5rem;justify-content:center}.modus-slider .slider{appearance:none;background:#0063a3;border-radius:0.5rem;height:0.5rem}.modus-slider label{color:#252a2e;font-size:0.75rem;margin-bottom:0.25rem}.modus-slider label span{color:#6a6e79;margin:0.25rem}.modus-slider .slider::-webkit-slider-thumb{appearance:none;background:#fff;border:0.125rem solid #0063a3;border-radius:50%;cursor:pointer;height:1rem;transition:0.2s background;width:1rem}.modus-slider .slider::-webkit-slider-thumb:hover{background:#0063a3}.modus-slider .slider::-moz-range-thumb{background:#fff;border:0.125rem solid #0063a3;border-radius:50%;cursor:pointer;height:1rem;transition:0.2s background;width:1rem}.modus-slider .slider::-moz-range-thumb:hover{background:#0063a3}.modus-slider.disabled{opacity:0.9;pointer-events:none}.modus-slider.disabled .slider{background-color:#a3a6b1}.modus-slider.disabled .slider::-webkit-slider-thumb{background:#a3a6b1;border-color:#7d808d}";

let ModusSlider$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.valueChange = createEvent(this, "valueChange", 7);
    this.valueInput = createEvent(this, "valueInput", 7);
    /** (optional) Whether the slider is disabled. **/
    this.disabled = false;
    /** (optional) The slider's maximum value. */
    this.maxValue = 100;
    /** (optional) The slider's minimum value. */
    this.minValue = 0;
  }
  handleOnChange(event) {
    const value = event.currentTarget.value;
    this.value = value;
    this.valueChange.emit(value);
  }
  handleOnInput(event) {
    const value = event.currentTarget.value;
    this.value = value;
    this.valueInput.emit(value);
  }
  render() {
    const className = `modus-slider ${this.disabled ? 'disabled' : ''}`;
    return (h("div", { "aria-disabled": this.disabled, "aria-label": this.ariaLabel, "aria-valuemax": this.maxValue, "aria-valuemin": this.minValue, "aria-valuenow": this.value, class: className }, this.label && h("label", null, this.label), h("input", { class: "slider", disabled: this.disabled, max: this.maxValue, min: this.minValue, onChange: (event) => this.handleOnChange(event), onInput: (event) => this.handleOnInput(event), type: "range", value: this.value })));
  }
  static get style() { return modusSliderCss; }
};
ModusSlider$1 = /*@__PURE__*/ proxyCustomElement(ModusSlider$1, [1, "modus-slider", {
    "ariaLabel": [1, "aria-label"],
    "disabled": [4],
    "label": [1],
    "maxValue": [2, "max-value"],
    "minValue": [2, "min-value"],
    "value": [1025]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-slider"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-slider":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusSlider$1);
      }
      break;
  } });
}

const ModusSlider = ModusSlider$1;
const defineCustomElement = defineCustomElement$1;

export { ModusSlider, defineCustomElement };

// eslint-disable-next-line
import { Component, Prop, h, Event, Element, State, Listen } from '@stencil/core';
export class ModusButton {
  constructor() {
    /** (optional) The style of the button */
    this.buttonStyle = 'fill';
    /** (optional) The color of the button. */
    this.color = 'default';
    /** (optional) The size of the button. */
    this.size = 'medium';
    this.classByButtonStyle = new Map([
      ['borderless', 'style-borderless'],
      ['fill', 'style-fill'],
      ['outline', 'style-outline'],
    ]);
    this.classByColor = new Map([
      ['danger', 'color-danger'],
      ['default', 'color-tertiary'],
      ['primary', 'color-primary'],
      ['secondary', 'color-secondary'],
      ['warning', 'color-warning'],
    ]);
    this.classBySize = new Map([
      ['small', 'size-small'],
      ['medium', 'size-medium'],
      ['large', 'size-large'],
    ]);
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Space':
        this.buttonClick.emit();
        break;
    }
  }
  render() {
    const className = `${this.classBySize.get(this.size)} ${this.classByColor.get(this.color)} ${this.classByButtonStyle.get(this.buttonStyle)}`;
    return (h("button", { "aria-disabled": this.disabled, "aria-label": this.ariaLabel, "aria-pressed": this.pressed, class: className, disabled: this.disabled, onClick: () => !this.disabled ? this.buttonClick.emit() : null, onKeyDown: () => this.pressed = true, onKeyUp: () => this.pressed = false, onMouseDown: () => this.pressed = true, onMouseUp: () => this.pressed = false, role: "button" },
      h("slot", null)));
  }
  static get is() { return "modus-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-button.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-button.css"]
  }; }
  static get properties() { return {
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The button's aria-label."
      },
      "attribute": "aria-label",
      "reflect": false
    },
    "buttonStyle": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'borderless' | 'fill' | 'outline'",
        "resolved": "\"borderless\" | \"fill\" | \"outline\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The style of the button"
      },
      "attribute": "button-style",
      "reflect": false,
      "defaultValue": "'fill'"
    },
    "color": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'danger' | 'default' | 'primary' | 'secondary' | 'warning'",
        "resolved": "\"danger\" | \"default\" | \"primary\" | \"secondary\" | \"warning\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The color of the button."
      },
      "attribute": "color",
      "reflect": false,
      "defaultValue": "'default'"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Disables the button."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'small' | 'medium' | 'large'",
        "resolved": "\"large\" | \"medium\" | \"small\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The size of the button."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'medium'"
    }
  }; }
  static get states() { return {
    "pressed": {}
  }; }
  static get events() { return [{
      "method": "buttonClick",
      "name": "buttonClick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "(optional) An event that fires on button click."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "keyup",
      "method": "elementKeyupHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}

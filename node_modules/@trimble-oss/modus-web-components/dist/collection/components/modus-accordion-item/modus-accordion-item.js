// eslint-disable-next-line
import { Component, Event, Prop, h } from '@stencil/core';
import { IconChevronUpThick } from '../icons/icon-chevron-up-thick';
import { IconChevronDownThick } from '../icons/icon-chevron-down-thick';
export class ModusAccordionItem {
  constructor() {
    /** (optional) The size of accordion item. */
    this.size = 'standard';
    this.classBySize = new Map([
      ['condensed', 'small'],
      ['standard', 'standard'],
    ]);
  }
  handleHeaderClick() {
    if (this.disabled) {
      return;
    }
    this.expanded = !this.expanded;
    if (this.expanded) {
      this.opened.emit();
    }
    else {
      this.closed.emit();
    }
  }
  handleKeydown(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleHeaderClick();
  }
  render() {
    const sizeClass = `${this.classBySize.get(this.size)}`;
    const disabledClass = `${this.disabled ? 'disabled' : ''}`;
    const iconSize = this.size === 'standard' ? '24' : '20';
    const bodyClass = `body ${sizeClass} ${this.expanded ? 'expanded' : ''}`;
    return (h("div", { "aria-disabled": this.disabled, "aria-expanded": this.expanded, class: "accordion-item", role: "region" },
      h("div", { class: `header ${sizeClass} ${disabledClass}`, onClick: () => this.handleHeaderClick(), onKeyDown: (event) => this.handleKeydown(event), tabIndex: 0 },
        h("span", { class: "title" }, this.headerText),
        this.expanded ? h(IconChevronUpThick, { size: iconSize }) : h(IconChevronDownThick, { size: iconSize })),
      h("div", { class: bodyClass },
        h("slot", null))));
  }
  static get is() { return "modus-accordion-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-accordion-item.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-accordion-item.css"]
  }; }
  static get properties() { return {
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Disables the accordion item, locks expand/collapse."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "expanded": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the accordion item is expanded."
      },
      "attribute": "expanded",
      "reflect": false
    },
    "headerText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(required) The text to render in the header."
      },
      "attribute": "header-text",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'condensed' | 'standard'",
        "resolved": "\"condensed\" | \"standard\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The size of accordion item."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'standard'"
    }
  }; }
  static get events() { return [{
      "method": "closed",
      "name": "closed",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on every accordion close."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "opened",
      "name": "opened",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on every accordion open."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
}

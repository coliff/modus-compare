// eslint-disable-next-line
import { Component, Event, h, Prop, State } from '@stencil/core';
import { IconChevronLeftThick } from '../icons/icon-chevron-left-thick';
import { IconChevronRightThick } from '../icons/icon-chevron-right-thick';
export class ModusPagination {
  constructor() {
    /* The pagination's size. */
    this.size = 'medium';
    this.chevronSizeBySize = new Map([
      ['small', '16'],
      ['medium', '20'],
      ['large', '24'],
    ]);
    this.classBySize = new Map([
      ['small', 'small'],
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
  }
  setPages() {
    const pages = [];
    const ellipsis = '...';
    // Always show the first page.
    pages.push(this.minPage);
    if (this.maxPage - this.minPage < 7) {
      // No need for ellipsis for 7 pages - push all of them.
      for (let i = this.minPage + 1; i < this.maxPage; i++) {
        pages.push(i);
      }
    }
    else {
      if (this.activePage - this.minPage < 4) {
        // One of the first 4 pages is active.
        [1, 2, 3, 4].map(val => pages.push(this.minPage + val));
        pages.push(ellipsis);
      }
      else if (this.maxPage - this.activePage < 4) {
        // One of the last 4 pages is active.
        pages.push(ellipsis);
        [4, 3, 2, 1].map(val => pages.push(this.maxPage - val));
      }
      else {
        // The active page is somewhere in the middle.
        pages.push(ellipsis);
        [-1, 0, 1].map(val => pages.push(this.activePage + val));
        pages.push(ellipsis);
      }
    }
    // Always show the last page.
    pages.push(this.maxPage);
    this.pages = pages;
  }
  handleChevronClick(way) {
    if (way === 'back' && this.activePage != this.minPage) {
      this.activePage--;
    }
    else if (way === 'forward' && this.activePage != this.maxPage) {
      this.activePage++;
    }
  }
  handleKeydownBack(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleChevronClick('back');
  }
  handleKeydownForward(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleChevronClick('forward');
  }
  handlePageClick(page) {
    if (!isNaN(page)) {
      this.activePage = page;
      this.pageChange.emit(page);
    }
  }
  render() {
    this.setPages();
    return (h("nav", { "aria-label": this.ariaLabel, class: `${this.classBySize.get(this.size)}` },
      h("ol", null,
        this.maxPage - this.minPage >= 7 &&
          h("li", { class: `${this.activePage != this.minPage ? 'hoverable' : 'disabled'}`, onClick: () => this.handleChevronClick('back'), onKeyDown: (event) => this.handleKeydownBack(event), tabIndex: 0 },
            h(IconChevronLeftThick, { size: this.chevronSizeBySize.get(this.size) })),
        this.pages.map(page => {
          return (h("li", { class: `${page === this.activePage ? 'active' : ''} ${!isNaN(+page) ? 'hoverable' : ''}`, onClick: () => this.handlePageClick(+page) }, page));
        }),
        this.maxPage - this.minPage >= 7 &&
          h("li", { class: `${this.activePage != this.maxPage ? 'hoverable' : 'disabled'}`, onClick: () => this.handleChevronClick('forward'), onKeyDown: (event) => this.handleKeydownForward(event), tabIndex: 0 },
            h(IconChevronRightThick, { size: this.chevronSizeBySize.get(this.size) })))));
  }
  static get is() { return "modus-pagination"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-pagination.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-pagination.css"]
  }; }
  static get properties() { return {
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "aria-label",
      "reflect": false
    },
    "activePage": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "active-page",
      "reflect": false
    },
    "maxPage": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "max-page",
      "reflect": false
    },
    "minPage": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "min-page",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'large' | 'medium' | 'small'",
        "resolved": "\"large\" | \"medium\" | \"small\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'medium'"
    }
  }; }
  static get states() { return {
    "pages": {}
  }; }
  static get events() { return [{
      "method": "pageChange",
      "name": "pageChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on page change."
      },
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      }
    }]; }
}

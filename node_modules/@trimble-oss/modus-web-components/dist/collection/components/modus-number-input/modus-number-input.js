// eslint-disable-next-line
import { Component, Event, h, Prop, Watch } from '@stencil/core';
export class ModusNumberInput {
  constructor() {
    /** (optional) The input's size. */
    this.size = 'medium';
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large']
    ]);
  }
  handleOnInput() {
    this.value = this.numberInput.value;
    this.valueChange.emit(this.value);
  }
  watchValue(newValue, oldValue) {
    if (isNaN(+newValue)) {
      this.value = oldValue;
      console.error(`${newValue} is not a number.`);
    }
    else {
      this.value = newValue;
    }
  }
  render() {
    const className = `modus-number-input ${this.disabled ? 'disabled' : ''}`;
    const inputContainerClassName = `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`;
    return (h("div", { "aria-disabled": this.disabled, "aria-label": this.ariaLabel, "aria-placeholder": this.placeholder, "aria-invalid": !!this.errorText, "aria-readonly": this.readOnly, "aria-required": this.required, "aria-valuemax": this.maxValue, "aria-valuemin": this.minValue, "aria-valuenow": this.value, class: className },
      this.label || this.required
        ? h("div", { class: "label-container" },
          this.label ? h("label", null, this.label) : null,
          this.required ? h("span", { class: "required" }, "*") : null)
        : null,
      h("div", { class: inputContainerClassName },
        h("input", { disabled: this.disabled, max: this.maxValue, min: this.minValue, onInput: () => this.handleOnInput(), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => this.numberInput = el, step: this.step, tabIndex: 0, type: "number", value: this.value })),
      this.errorText ? h("label", { class: "sub-text error" }, this.errorText) :
        this.validText ? h("label", { class: "sub-text valid" }, this.validText) :
          this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) :
            null));
  }
  static get is() { return "modus-number-input"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-number-input.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-number-input.css"]
  }; }
  static get properties() { return {
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's aria-label."
      },
      "attribute": "aria-label",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the input is disabled."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "errorText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's error state text."
      },
      "attribute": "error-text",
      "reflect": false
    },
    "helperText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's helper text displayed below the input."
      },
      "attribute": "helper-text",
      "reflect": false
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's label."
      },
      "attribute": "label",
      "reflect": false
    },
    "maxValue": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's maximum value."
      },
      "attribute": "max-value",
      "reflect": false
    },
    "minValue": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's minimum value."
      },
      "attribute": "min-value",
      "reflect": false
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's placeholder text."
      },
      "attribute": "placeholder",
      "reflect": false
    },
    "readOnly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the input's content is read-only"
      },
      "attribute": "read-only",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the input is required."
      },
      "attribute": "required",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'medium' | 'large'",
        "resolved": "\"large\" | \"medium\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's size."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'medium'"
    },
    "step": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's step."
      },
      "attribute": "step",
      "reflect": false
    },
    "validText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's valid state text."
      },
      "attribute": "valid-text",
      "reflect": false
    },
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's value."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "valueChange",
      "name": "valueChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on input value change."
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }]; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "watchValue"
    }]; }
}

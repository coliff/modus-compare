// eslint-disable-next-line
import { Component, Element, Event, h, Listen, Prop, State } from '@stencil/core';
import { IconTriangleDown } from '../icons/icon-triangle-down';
import { createGuid } from '../../utils/utils';
export class ModusSelect {
  constructor() {
    /** (optional) The number of visible options in a drop-down list. */
    // @Prop() numberOfOptions = 5;
    /** The options for the dropdown list. */
    this.options = [];
    /** (optional) The input's size. */
    this.size = 'medium';
    this.activeItemIndex = 0;
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large']
    ]);
  }
  documentClickHandler(event) {
    // Close the select when click is outside the current element.
    if (event.defaultPrevented || event.target.closest('modus-select')) {
      return;
    }
    this.hideDropdown();
  }
  elementKeydownHandler(event) {
    if (!this.visible || this.el.shadowRoot.activeElement.tagName !== 'BUTTON') {
      return;
    }
    switch (event.key) {
      case 'ArrowDown':
        this.activeItemIndex = this.activeItemIndex + 1 < this.options.length ? this.activeItemIndex + 1 : this.activeItemIndex;
        break;
      case 'ArrowUp':
        this.activeItemIndex = this.activeItemIndex - 1 > 0 ? this.activeItemIndex - 1 : 0;
        break;
      case 'Enter':
        this.value = this.options[this.activeItemIndex];
        this.activeItemIndex = 0;
        break;
      case 'Tab':
        this.hideDropdown();
        break;
    }
  }
  handleButtonClick() {
    if (this.visible) {
      this.hideDropdown();
    }
    else {
      this.showDropdown();
    }
  }
  handleItemSelect(option) {
    this.value = option;
    this.valueChange.emit(option);
    this.hideDropdown();
    this.el.shadowRoot.querySelector('button').focus();
  }
  hideDropdown() {
    this.visible = false;
    this.activeItemIndex = 0;
  }
  showDropdown() {
    var _a;
    this.visible = true;
    const activeOptionIndex = (_a = this.options) === null || _a === void 0 ? void 0 : _a.findIndex(option => option === this.value);
    if (activeOptionIndex > -1) {
      this.activeItemIndex = activeOptionIndex;
    }
  }
  render() {
    const buttonClass = `${this.classBySize.get(this.size)} ${this.errorText ? 'error' : this.validText ? 'valid' : ''}`;
    const dropdownListClass = `dropdown-list ${this.visible ? 'visible' : 'hidden'} ${this.classBySize.get(this.size)}`;
    const inputContainerClass = `input-container ${this.visible ? 'dropdown-visible' : ''}`;
    return (h("div", { role: "listbox", "aria-disabled": this.disabled, "aria-label": this.ariaLabel, "aria-required": this.required },
      this.label || this.required
        ? h("div", { class: 'label-container' },
          this.label ? h("label", null, this.label) : null,
          this.required ? h("span", { class: "required" }, "*") : null)
        : null,
      h("div", { class: inputContainerClass },
        h("button", { class: buttonClass, disabled: this.disabled, onClick: () => this.handleButtonClick(), type: "button", "aria-invalid": !!this.errorText },
          h("div", { class: "dropdown-text" }, this.value ? this.value[this.optionsDisplayProp] : null),
          h(IconTriangleDown, { size: '12' })),
        h("div", { class: dropdownListClass }, this.options.map((option, index) => h("div", { "aria-selected": index === this.activeItemIndex, "aria-label": option[this.optionsDisplayProp], class: `dropdown-list-item ${index === this.activeItemIndex ? 'active' : ''}`, key: createGuid(), onClick: () => this.handleItemSelect(option), onMouseEnter: () => this.activeItemIndex = index }, option[this.optionsDisplayProp])))),
      this.errorText ? h("label", { class: "sub-text error" }, this.errorText) :
        this.validText ? h("label", { class: "sub-text valid" }, this.validText) :
          this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) :
            null));
  }
  static get is() { return "modus-select"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-select.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-select.css"]
  }; }
  static get properties() { return {
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The select's aria-label."
      },
      "attribute": "aria-label",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the input is disabled."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "errorText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's error text."
      },
      "attribute": "error-text",
      "reflect": false
    },
    "helperText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's helper text."
      },
      "attribute": "helper-text",
      "reflect": false
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input label."
      },
      "attribute": "label",
      "reflect": false
    },
    "options": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "unknown[]",
        "resolved": "unknown[]",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The options for the dropdown list."
      },
      "defaultValue": "[]"
    },
    "optionsDisplayProp": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The options property to render in the dropdown list."
      },
      "attribute": "options-display-prop",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the input is required."
      },
      "attribute": "required",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'medium' | 'large'",
        "resolved": "\"large\" | \"medium\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's size."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'medium'"
    },
    "validText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input's valid text."
      },
      "attribute": "valid-text",
      "reflect": false
    },
    "value": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "unknown",
        "resolved": "unknown",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The input value."
      }
    }
  }; }
  static get states() { return {
    "activeItemIndex": {},
    "visible": {}
  }; }
  static get events() { return [{
      "method": "valueChange",
      "name": "valueChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on input value change."
      },
      "complexType": {
        "original": "unknown",
        "resolved": "unknown",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "click",
      "method": "documentClickHandler",
      "target": "document",
      "capture": false,
      "passive": false
    }, {
      "name": "keydown",
      "method": "elementKeydownHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}

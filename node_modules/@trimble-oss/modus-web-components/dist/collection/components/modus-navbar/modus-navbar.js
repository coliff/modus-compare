// eslint-disable-next-line
import { Component, Prop, h, Event, State, Listen } from '@stencil/core';
import { IconMenu } from '../icons/icon-menu';
import { IconNotifications } from '../icons/icon-notifications';
import { IconApps } from '../icons/icon-apps';
import { IconSearch } from '../icons/icon-search';
export class ModusNavbar {
  documentClickHandler(event) {
    // Individual menus can prevent this listener from closing them.
    if (event.defaultPrevented) {
      return;
    }
    this.hideMenus();
  }
  signOutClickHandler(event) {
    this.profileMenuSignOutClick.emit(event);
  }
  appsMenuClickHandler(event) {
    event.preventDefault();
    this.appsMenuToggle();
  }
  appsMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.appsMenuToggle();
  }
  appsMenuToggle() {
    if (this.appsMenuVisible) {
      this.appsMenuVisible = false;
    }
    else {
      this.hideMenus();
      this.appsMenuVisible = true;
    }
  }
  mainMenuClickHandler(event) {
    event.preventDefault();
    this.mainMenuToggle();
  }
  mainMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.mainMenuToggle();
  }
  mainMenuToggle() {
    if (this.mainMenuVisible) {
      this.mainMenuVisible = false;
    }
    else {
      this.hideMenus();
      this.mainMenuVisible = true;
    }
  }
  notificationsMenuClickHandler(event) {
    event.preventDefault();
    this.notificationsMenuToggle();
  }
  notificationsMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.notificationsMenuToggle();
  }
  notificationsMenuToggle() {
    if (this.notificationsMenuVisible) {
      this.notificationsMenuVisible = false;
    }
    else {
      this.hideMenus();
      this.notificationsMenuVisible = true;
    }
  }
  profileMenuClickHandler(event) {
    event.preventDefault();
    this.profileMenuToggle();
  }
  profileMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.profileMenuToggle();
  }
  profileMenuToggle() {
    if (this.profileMenuVisible) {
      this.profileMenuVisible = false;
    }
    else {
      this.hideMenus();
      this.profileMenuVisible = true;
    }
  }
  hideMenus() {
    this.appsMenuVisible = false;
    this.mainMenuVisible = false;
    this.notificationsMenuVisible = false;
    this.profileMenuVisible = false;
  }
  render() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const direction = this.reverse ? 'reverse' : '';
    return (h("nav", { class: direction },
      h("div", { class: `left ${direction}` },
        this.showMainMenu &&
          h("div", { class: "navbar-button" },
            h("span", { onKeyDown: (event) => this.mainMenuKeydownHandler(event), tabIndex: 0 },
              h(IconMenu, { size: "24", onClick: (event) => this.mainMenuClickHandler(event) })),
            this.mainMenuVisible && h("modus-navbar-main-menu", null,
              h("slot", { name: "main" }))),
        h("img", { class: "product-logo", height: "24", src: (_a = this.productLogoOptions) === null || _a === void 0 ? void 0 : _a.url, alt: "Modus navbar product logo", onClick: (event) => this.productLogoClick.emit(event) })),
      h("div", { class: `right ${direction}` },
        this.showSearch &&
          h("div", { class: "navbar-button search" },
            h(IconSearch, { size: "24" })),
        this.showNotifications &&
          h("div", { class: "navbar-button" },
            h("span", { onKeyDown: (event) => this.notificationsMenuKeydownHandler(event), tabIndex: 0 },
              h(IconNotifications, { size: "24", onClick: (event) => this.notificationsMenuClickHandler(event) })),
            this.notificationsMenuVisible && h("modus-navbar-notifications-menu", { reverse: this.reverse },
              h("slot", { name: "notifications" }))),
        this.showPendoPlaceholder && h("div", { class: 'pendo-placeholder' }),
        this.showAppsMenu &&
          h("div", { class: "navbar-button" },
            h("span", { onKeyDown: (event) => this.appsMenuKeydownHandler(event), tabIndex: 0 },
              h(IconApps, { size: "24", onClick: (event) => this.appsMenuClickHandler(event) })),
            this.appsMenuVisible && h("modus-navbar-apps-menu", { apps: this.apps, reverse: this.reverse })),
        h("div", { class: "profile-menu" },
          ((_b = this.profileMenuOptions) === null || _b === void 0 ? void 0 : _b.avatarUrl) ?
            h("img", { class: "avatar", height: "32", src: (_c = this.profileMenuOptions) === null || _c === void 0 ? void 0 : _c.avatarUrl, alt: "Modus navbar profile menu avatar", onClick: (event) => this.profileMenuClickHandler(event), onKeyDown: (event) => this.profileMenuKeydownHandler(event), tabIndex: 0 })
            : h("span", { class: "initials", onClick: (event) => this.profileMenuClickHandler(event), onKeyDown: (event) => this.profileMenuKeydownHandler(event), tabIndex: 0 }, (_d = this.profileMenuOptions) === null || _d === void 0 ? void 0 : _d.initials),
          this.profileMenuVisible &&
            h("modus-navbar-profile-menu", { "avatar-url": (_e = this.profileMenuOptions) === null || _e === void 0 ? void 0 : _e.avatarUrl, email: (_f = this.profileMenuOptions) === null || _f === void 0 ? void 0 : _f.email, initials: (_g = this.profileMenuOptions) === null || _g === void 0 ? void 0 : _g.initials, reverse: this.reverse, username: (_h = this.profileMenuOptions) === null || _h === void 0 ? void 0 : _h.username })))));
  }
  static get is() { return "modus-navbar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-navbar.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-navbar.css"]
  }; }
  static get properties() { return {
    "apps": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "App[]",
        "resolved": "App[]",
        "references": {
          "App": {
            "location": "import",
            "path": "./apps-menu/modus-navbar-apps-menu"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The apps to render in the apps menu."
      }
    },
    "productLogoOptions": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "{ url: string }",
        "resolved": "{ url: string; }",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(required) Product logo options."
      }
    },
    "profileMenuOptions": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "{ avatarUrl?: string, email?: string, initials?: string, username: string }",
        "resolved": "{ avatarUrl?: string; email?: string; initials?: string; username: string; }",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(required) Profile menu options."
      }
    },
    "reverse": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether to display the navbar items in reverse order."
      },
      "attribute": "reverse",
      "reflect": false
    },
    "showAppsMenu": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether to show the apps menu."
      },
      "attribute": "show-apps-menu",
      "reflect": false
    },
    "showMainMenu": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether to show the main menu."
      },
      "attribute": "show-main-menu",
      "reflect": false
    },
    "showNotifications": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether to show notifications."
      },
      "attribute": "show-notifications",
      "reflect": false
    },
    "showPendoPlaceholder": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether to show the placeholder for Pendo."
      },
      "attribute": "show-pendo-placeholder",
      "reflect": false
    },
    "showSearch": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether to show search."
      },
      "attribute": "show-search",
      "reflect": false
    }
  }; }
  static get states() { return {
    "appsMenuVisible": {},
    "mainMenuVisible": {},
    "notificationsMenuVisible": {},
    "profileMenuVisible": {}
  }; }
  static get events() { return [{
      "method": "productLogoClick",
      "name": "productLogoClick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on product logo click."
      },
      "complexType": {
        "original": "MouseEvent",
        "resolved": "MouseEvent",
        "references": {
          "MouseEvent": {
            "location": "global"
          }
        }
      }
    }, {
      "method": "profileMenuSignOutClick",
      "name": "profileMenuSignOutClick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on profile menu sign out click."
      },
      "complexType": {
        "original": "MouseEvent",
        "resolved": "MouseEvent",
        "references": {
          "MouseEvent": {
            "location": "global"
          }
        }
      }
    }]; }
  static get listeners() { return [{
      "name": "click",
      "method": "documentClickHandler",
      "target": "document",
      "capture": false,
      "passive": false
    }, {
      "name": "signOutClick",
      "method": "signOutClickHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}

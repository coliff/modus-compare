// eslint-disable-next-line
import { Component, Event, h, Method, Prop, State } from '@stencil/core';
import { IconClose } from '../icons/icon-close';
export class ModusModal {
  async close() {
    this.visible = false;
    this.closed.emit();
    return Promise.resolve();
  }
  async open() {
    this.visible = true;
    this.opened.emit();
    return Promise.resolve();
  }
  handleOverlayClick(event) {
    if (event.target.classList.contains('overlay')) {
      this.close();
    }
  }
  handlePrimaryKeydown(event) {
    switch (event.code) {
      case 'Enter':
        this.primaryButtonClick.emit();
        break;
    }
  }
  handleSecondaryKeydown(event) {
    switch (event.code) {
      case 'Enter':
        this.secondaryButtonClick.emit();
        break;
    }
  }
  render() {
    return (h("div", { "aria-hidden": this.closed, "aria-label": this.ariaLabel, class: `modus-modal overlay ${this.visible ? 'visible' : 'hidden'}`, onClick: (event) => this.handleOverlayClick(event), role: "dialog" },
      h("div", { class: "content" },
        h("div", { class: "header" },
          this.headerText,
          h("div", { class: "icon-close", onClick: () => this.close() },
            h(IconClose, { size: "20" }))),
        h("div", { class: "body" },
          h("slot", null)),
        h("div", { class: "footer" },
          this.secondaryButtonText &&
            h("modus-button", { "button-style": "outline", color: "secondary", onClick: () => this.secondaryButtonClick.emit(), onKeyDown: (event) => this.handlePrimaryKeydown(event) }, this.secondaryButtonText),
          this.primaryButtonText &&
            h("modus-button", { color: "primary", onClick: () => this.primaryButtonClick.emit(), onKeyDown: (event) => this.handleSecondaryKeydown(event) }, this.primaryButtonText)))));
  }
  static get is() { return "modus-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-modal.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-modal.css"]
  }; }
  static get properties() { return {
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The modal's aria-label."
      },
      "attribute": "aria-label",
      "reflect": false
    },
    "headerText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The modal's primary button text."
      },
      "attribute": "header-text",
      "reflect": false
    },
    "primaryButtonText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The modal's primary button text."
      },
      "attribute": "primary-button-text",
      "reflect": false
    },
    "secondaryButtonText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The modal's secondary button text."
      },
      "attribute": "secondary-button-text",
      "reflect": false
    }
  }; }
  static get states() { return {
    "visible": {}
  }; }
  static get events() { return [{
      "method": "closed",
      "name": "closed",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on modal close."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "opened",
      "name": "opened",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on modal open."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "primaryButtonClick",
      "name": "primaryButtonClick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on primary button click."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "secondaryButtonClick",
      "name": "secondaryButtonClick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on secondary button click."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "close": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "open": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    }
  }; }
}

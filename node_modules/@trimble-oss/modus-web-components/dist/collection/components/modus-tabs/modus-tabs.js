// eslint-disable-next-line
import { Component, Event, h, Prop } from '@stencil/core';
export class ModusTabs {
  constructor() {
    /* (optional) The tabs' size. */
    this.size = 'medium';
    /** The tabs to render. */
    this.tabs = [];
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['small', 'small'],
    ]);
  }
  handleKeyDown(event, id) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleTabChange(id);
  }
  handleTabChange(id) {
    if (id === this.tabs.find(tab => tab.active).id) {
      return;
    }
    this.tabs = this.tabs.map(tab => {
      return Object.assign(Object.assign({}, tab), { active: tab.id === id });
    });
    this.tabChange.emit(id);
  }
  render() {
    const tabs = this.tabs.map((tab) => {
      return (h("div", { class: `tab ${tab.active ? 'active' : ''} ${this.classBySize.get(this.size)}`, onClick: () => this.handleTabChange(tab.id), onKeyDown: (event) => this.handleKeyDown(event, tab.id), tabIndex: 0 }, tab.label));
    });
    return (h("div", { "aria-label": this.ariaLabel, class: `modus-tabs ${this.classBySize.get(this.size)}` }, tabs));
  }
  static get is() { return "modus-tabs"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-tabs.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-tabs.css"]
  }; }
  static get properties() { return {
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "aria-label",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'medium' | 'small'",
        "resolved": "\"medium\" | \"small\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'medium'"
    },
    "tabs": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "Tab[]",
        "resolved": "Tab[]",
        "references": {
          "Tab": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The tabs to render."
      },
      "defaultValue": "[]"
    }
  }; }
  static get events() { return [{
      "method": "tabChange",
      "name": "tabChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on tab change."
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }]; }
}

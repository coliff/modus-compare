// eslint-disable-next-line
import { Component, Prop, h, Event, Listen, State } from '@stencil/core';
export class ModusDropdown {
  constructor() {
    /** (optional) The placement of the dropdown in related to the toggleElement */
    this.placement = 'bottom';
    this.classByPlacement = new Map([
      ['top', 'top'],
      ['right', 'right'],
      ['bottom', 'bottom'],
      ['left', 'left'],
    ]);
  }
  documentClickHandler(event) {
    if (!event.defaultPrevented) {
      if (event.target.closest(`#${this.toggleElementId}`)) {
        this.visible = !this.visible;
      }
      else {
        this.visible = false;
      }
      if (!this.visible) {
        this.dropdownClose.emit();
      }
    }
  }
  componentWillLoad() {
    this.toggleElement = document.querySelector(`#${this.toggleElementId}`);
    if (!this.toggleElement) {
      throw Error('matching element not found for toggle-element-id');
    }
  }
  render() {
    const listContainerClass = `dropdown-list ${this.visible ? 'visible' : 'hidden'} ${this.classByPlacement.get(this.placement)}`;
    const left = this.placement === 'right' ? `${this.toggleElement.offsetWidth}px` : 'unset';
    const width = `${this.toggleElement.offsetWidth ? this.toggleElement.offsetWidth : 0}px`;
    return (h("div", { "aria-label": this.ariaLabel, class: "dropdown", role: "listbox" },
      h("slot", { name: "dropdownToggle" }),
      h("div", { class: listContainerClass, style: { 'left': left, 'min-width': width } },
        h("slot", { name: "dropdownList" }))));
  }
  static get is() { return "modus-dropdown"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-dropdown.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-dropdown.css"]
  }; }
  static get properties() { return {
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The dropdown's aria-label."
      },
      "attribute": "aria-label",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Disables the dropdown"
      },
      "attribute": "disabled",
      "reflect": false
    },
    "placement": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'top' | 'right' | 'bottom' | 'left'",
        "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The placement of the dropdown in related to the toggleElement"
      },
      "attribute": "placement",
      "reflect": false,
      "defaultValue": "'bottom'"
    },
    "toggleElementId": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(required) The element id that the list renders near and that triggers the toggling of the list"
      },
      "attribute": "toggle-element-id",
      "reflect": false
    }
  }; }
  static get states() { return {
    "toggleElement": {},
    "visible": {}
  }; }
  static get events() { return [{
      "method": "dropdownClose",
      "name": "dropdownClose",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on dropdown close"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get listeners() { return [{
      "name": "click",
      "method": "documentClickHandler",
      "target": "document",
      "capture": false,
      "passive": false
    }]; }
}

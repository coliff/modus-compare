// eslint-disable-next-line
import { Component, Prop, h, Event, Listen } from '@stencil/core';
import { IconCheck } from '../icons/icon-check';
import { IconIndeterminate } from '../icons/icon-indeterminate';
export class ModusCheckbox {
  constructor() {
    /** (optional) The size of the button */
    this.size = 'medium';
    this.classBySize = new Map([
      ['small', 'small'],
      ['medium', 'medium']
    ]);
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.handleCheckboxClick();
        break;
    }
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Space':
        this.handleCheckboxClick();
        break;
    }
  }
  componentDidRender() {
    this.checkboxInput.indeterminate = this.indeterminate;
  }
  handleCheckboxClick() {
    if (this.disabled) {
      return;
    }
    this.updateChecked();
    this.checkboxClick.emit(this.checked);
  }
  updateChecked() {
    this.checked = !this.checked;
    this.checkboxInput.checked = this.checked;
    this.indeterminate = false;
  }
  render() {
    var _a;
    const className = `modus-checkbox ${(_a = this.classBySize) === null || _a === void 0 ? void 0 : _a.get(this.size)}`;
    return (h("div", { class: className, onClick: () => this.handleCheckboxClick(), tabIndex: 0 },
      h("div", { class: `${this.checked || this.indeterminate ? 'checkbox blue-background' : 'checkbox'} ${this.disabled ? 'disabled' : ''}` }, this.indeterminate
        ? h("div", { class: 'checkmark checked' },
          h(IconIndeterminate, { color: "#FFFFFF", size: "24" }))
        : h("div", { class: this.checked ? 'checkmark checked' : 'checkmark' },
          h(IconCheck, { color: "#FFFFFF", size: "24" }))),
      h("input", { "aria-checked": this.checked, "aria-disabled": this.disabled, "aria-label": this.ariaLabel, checked: this.checked, disabled: this.disabled, ref: (el) => this.checkboxInput = el, type: "checkbox" }),
      this.label ? h("label", { class: this.disabled ? 'disabled' : null }, this.label) : null));
  }
  static get is() { return "modus-checkbox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modus-checkbox.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modus-checkbox.css"]
  }; }
  static get properties() { return {
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The checkbox's aria-label."
      },
      "attribute": "aria-label",
      "reflect": false
    },
    "checked": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the checkbox is checked."
      },
      "attribute": "checked",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the checkbox is disabled."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "indeterminate": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Whether the checkbox is indeterminate."
      },
      "attribute": "indeterminate",
      "reflect": false
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The checkbox label."
      },
      "attribute": "label",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'small' | 'medium'",
        "resolved": "\"medium\" | \"small\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) The size of the button"
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'medium'"
    }
  }; }
  static get events() { return [{
      "method": "checkboxClick",
      "name": "checkboxClick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event that fires on checkbox click."
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get listeners() { return [{
      "name": "keydown",
      "method": "elementKeydownHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "keyup",
      "method": "elementKeyupHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
